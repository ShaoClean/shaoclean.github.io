import{_ as n,a0 as a,a1 as s,a4 as e}from"./framework-16947f8e.js";const t={},p=e(`<h1 id="路由生命周期" tabindex="-1"><a class="header-anchor" href="#路由生命周期" aria-hidden="true">#</a> 路由生命周期</h1><p>1.导航确认激活</p><p>2.beforeRouteLeave</p><p>3.beforeEach</p><p>4.beforeRouteUpdate</p><p>5.beforeEnter</p><p>6.解析异步组件</p><p>7.beforeRouteEnter</p><p>8.beforeResolve</p><p>9.afterEach</p><h2 id="_1-beforerouteleave" tabindex="-1"><a class="header-anchor" href="#_1-beforerouteleave" aria-hidden="true">#</a> 1.beforeRouteLeave</h2><blockquote><p>在导航离开渲染该组件的对应路由时调用</p></blockquote><h2 id="_2-beforeeach" tabindex="-1"><a class="header-anchor" href="#_2-beforeeach" aria-hidden="true">#</a> 2.beforeEach</h2><blockquote><p>当一个导航触发时，全局前置守卫按照创建顺序调用。</p><p>守卫是异步解析执行，此时导航在所有守卫 resolve 完之前一直处于等待中</p></blockquote><p><code>全局前置守卫按照创建顺序调用</code></p><p>一般来说，会在路由创建的文件中定义一个全局前置守卫。如果在某一个页面中也定义了一个全局前置守卫，在第一次进入这个页面不会发生效果，而是执行一个<code>创建</code>的操作。当再一次触发导航时，全局前置守卫会<code>按照创建顺序调用</code>。</p><p>在创建路由的文件中定义全局前置守卫：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;sayhi&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;../pages/say-hi.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/pagetest&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;pagetest&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;../pages/page-test.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> routes <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 page-test.vue 文件中定义全职前置守卫：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;page-test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 say-hi.vue 文件中定义全局前置守卫：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;say-hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>刚开始进来的时候，页面默认进入到<code>/</code>路径中，并在控制台输出<code>index</code>，会再创建一个全局前置守卫。</p></li><li><p>当导航跳转到<code>/page-test</code>路径时，按创建顺序触发全局前置守卫。</p></li></ol><p>​ 输出：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>index<span class="token punctuation">;</span>
say <span class="token operator">-</span> hi<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>当导航跳转到<code>/</code>路径时，又会再创建一个全局前置守卫。然后按创建顺序触发全局前置守卫。</li></ol><p>输出:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>index<span class="token punctuation">;</span>
say <span class="token operator">-</span> hi<span class="token punctuation">;</span>
page <span class="token operator">-</span> test<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-beforerouteupdate" tabindex="-1"><a class="header-anchor" href="#_3-beforerouteupdate" aria-hidden="true">#</a> 3.beforeRouteUpdate</h2><blockquote><p>在当前路由改变，但是该组件被复用时调用</p></blockquote><p>比如当前在的路径是<code>/user/1</code>需要跳转到<code>/user/2</code>，那么此时调用的是同一个组件，就会触发这个钩子。</p><h2 id="_4-beforeenter" tabindex="-1"><a class="header-anchor" href="#_4-beforeenter" aria-hidden="true">#</a> 4.beforeEnter</h2><p>独享路由配置</p><h2 id="_5-解析异步组件" tabindex="-1"><a class="header-anchor" href="#_5-解析异步组件" aria-hidden="true">#</a> 5.解析异步组件</h2><h2 id="_6-beforerouteenter" tabindex="-1"><a class="header-anchor" href="#_6-beforerouteenter" aria-hidden="true">#</a> 6.beforeRouteEnter</h2><h2 id="_7-beforeresolve" tabindex="-1"><a class="header-anchor" href="#_7-beforeresolve" aria-hidden="true">#</a> 7.beforeResolve</h2><h2 id="_8-导航被确认" tabindex="-1"><a class="header-anchor" href="#_8-导航被确认" aria-hidden="true">#</a> 8.导航被确认</h2><h2 id="_9-aftereach" tabindex="-1"><a class="header-anchor" href="#_9-aftereach" aria-hidden="true">#</a> 9.afterEach</h2><h2 id="_10-触发-dom-更新" tabindex="-1"><a class="header-anchor" href="#_10-触发-dom-更新" aria-hidden="true">#</a> 10.触发 DOM 更新</h2>`,39),o=[p];function c(i,u){return a(),s("div",null,o)}const l=n(t,[["render",c],["__file","router-life-cycle.html.vue"]]);export{l as default};
