import{_ as a,a0 as n,a1 as s,a4 as p}from"./framework-786d5328.js";const e={},t=p(`<h1 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h1><p>可以分为下面三大类</p><ul><li><p>数据的逻辑结构</p><ul><li><p>线性结构</p><p>指数据元素之间存在一对一的关系</p><p>线性表、栈（特殊线性表）、队列（特殊线性表）、字符串、数组、广义表</p></li><li><p>非线性结构</p><p>指数据元素之间存在一对多或者多对多的关系</p><p>树形结构（一对多）、图形结构（多对多）</p></li></ul></li><li><p>数据的存储结构</p><ul><li>顺序存储</li><li>链式存储</li></ul></li><li><p>数据的运算</p></li></ul><p>​ 检索、排序、插入、删除、修改等</p><h2 id="_1-绪论" tabindex="-1"><a class="header-anchor" href="#_1-绪论" aria-hidden="true">#</a> 1.绪论</h2><h3 id="算法和算法分析" tabindex="-1"><a class="header-anchor" href="#算法和算法分析" aria-hidden="true">#</a> 算法和算法分析</h3><h4 id="算法特性" tabindex="-1"><a class="header-anchor" href="#算法特性" aria-hidden="true">#</a> 算法特性</h4><ul><li>有穷性：一个算法必须总是在执行有穷步之后结束，且每一步都在有穷事件内完成</li><li>确定性：算法中的每一条指令必须有确切的含义，没有二义性，在任何条件下只有唯一的一条执行路径，即对于相同的输入只能得到相同的输出</li><li>可行性：算法是可执行的，算法描述的操作可以通过已经实现的基本操作执行有限次来实现</li><li>输入：一个算法有0个或多个输入</li><li>输出：一个算法有一个或多个输出</li></ul><h4 id="算法设计要求" tabindex="-1"><a class="header-anchor" href="#算法设计要求" aria-hidden="true">#</a> 算法设计要求</h4><ul><li>正确性</li><li>可读性</li><li>健壮性</li><li>高效性</li></ul><h4 id="算法分析" tabindex="-1"><a class="header-anchor" href="#算法分析" aria-hidden="true">#</a> 算法分析</h4><p>如何衡量一个算法的好坏？ 一个好的算法首先要具备正确性，然后是健壮性，可读性，在几个方面都满足的情况下，主要考虑算法的效率，通过算法的效率高低来评判不同算法的优劣程度。 主要考虑下面两个方面：</p><ul><li>时间效率：指的是算法所耗费的时间</li><li>空间效率：指的是算法执行过程中所耗费的存储空间</li></ul><p><strong>1.算法时间效率的度量</strong> 算法运行时间 = 一个简单操作所需的时间 * 简单操作次数 = （每条语句频度 * 该语句执行一次所需的时间）求和</p><p>若有某个辅助函数f(n)，使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于0的常数，则称f(n)是T(n)的同数量级函数。 记作T(n)=O(f(n))，称O(f(n))喂算法的渐进时间复杂度（O是数量级的符号），简称时间复杂度</p><p><span style="color:red;">例</span>： 求<code>T(n) = 2n^3 + 3n^2 + 2n + 1</code>的时间复杂度</p><p>根据定义，需要找到一个辅助函数f(n)，当n趋近于无穷大时，使得T(n)/f(n) ～ 常数（0除外）。</p><p>因为n是趋近于无穷大的，所以可以得出T(n)的极限值为2n^3。</p><p>因此问题就变成了2n^3/f(n) ～ 常数（0除外），也就是说当n充分大的时候，T(n)的数量级为n^3，T(n)于n^3是同一个数量级的（同阶）</p><p>那么此时，易得f(n) = n^3，常数为2</p><p>所以T(n) = O(n^3)</p><p><strong>2.算法空间复杂度的度量</strong></p><p>空间复杂度：算法所需存储空间的度量（其中n为问题的规模（或大小） $$ S(n) = O(f(n)) $$ 算法要占据的空间可以是：</p><ul><li>1.算法本身要占据的空间，输入\\输出，指令，常数，变量等</li><li>2.算法要使用的辅助空间</li></ul><p><span style="color:red;">例</span>：</p><p>实现将数组a中的数据逆序的存放到数组b中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//算法1</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  t <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  a<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//算法2</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>、
	b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析：</p><p>在算法一中，涉及到了一个新的中间变量来存储，且这个变量每次的存储个数固定为1。所以可以可以得到算法1中的空间复杂度为1。用公式可以表示为： $$ S(n) = O(1) $$ 在算法二中，涉及到了一个新的数组用来转换。这个数据的长度个数为n的，所以空间复杂度为n。可以用公式表示为： $$ S(n) = O(n) $$</p><h2 id="_2-线性表" tabindex="-1"><a class="header-anchor" href="#_2-线性表" aria-hidden="true">#</a> 2.线性表</h2><h3 id="_1-线性表的定义和特点" tabindex="-1"><a class="header-anchor" href="#_1-线性表的定义和特点" aria-hidden="true">#</a> 1.线性表的定义和特点</h3><p>线性表是具有<strong>相同特性</strong>的数据元素的一个有限序列。</p><p>线性表的逻辑特征：</p><ul><li>1.在非空的线性表，有且仅有一个开始节点$a_1$，它没有直接前趋，而仅有一个直接后继$a_2$；</li><li>2.有且仅有一个中断节点$a_n$，它没有直接后继，而仅有一个直接前趋$a_{n-1}$</li><li>3.其余的内部节点$a_i(2 \\leq i \\leq n-1)$都有且仅有一个直接前趋$a_{i-1}$和一个直接后继$a_{i+1}$</li></ul><p>顺序存储结构存在问题：</p><ul><li>存储空间分配不灵活</li><li>运算的空间复杂度高</li></ul><h3 id="_2-线性表的类型定义" tabindex="-1"><a class="header-anchor" href="#_2-线性表的类型定义" aria-hidden="true">#</a> 2.线性表的类型定义</h3><p><strong>线性表的基本操作</strong></p><ul><li><p>1.InitList(&amp;L)</p><p>构造一个空的线性表L</p></li><li><p>2.DestoryList(&amp;L)</p><p>线性表L存在的情况下</p><p>销毁线性表L</p></li><li><p>3.ClearList(&amp;L)</p></li></ul><p>​ 线性表L存在的情况下</p><p>​ 将线性表L重置为空表</p><ul><li><p>4.ListEmpty(&amp;L)</p><p>线性表L存在的情况下</p></li></ul><p>​ 若线性表L为空表，则返回true；否则返回false。</p><ul><li>5.ListLength(&amp;L)</li></ul><p>​ 线性表L存在的情况下</p><p>​ 返回线性表L中的数据元素个数</p><ul><li>6.GetElem(L,i,&amp;e)</li></ul><p>​ 线性表L存在的情况下,1&lt;=i&lt;=ListLength(L)</p><p>​ 用e返回线性表L中第i个数据元素的值。</p><ul><li>7.LocateElem(L,e,compare())</li></ul><p>​ 线性表L存在的情况下,compare()是数据元素判定函数</p><p>​ 返回L中第一个与e满足compare()的数据元素的位序。若这样的数据元素不存在则返回值为0</p><ul><li>8.PriorElem(L,cur_e,&amp;pre_e)</li></ul><p>​ 线性表L存在的情况下，cur_e表示当前元素</p><p>​ 若cur_e是L的数据元素，且不是第一个，则用pre_e返回它的前驱，否则操作失败，pre_e无意义。</p><ul><li>9.NextElem(L,cur_e,&amp;next_e)</li></ul><p>​ 线性表L存在的情况下</p><p>​ 若cur_e是L的数据元素，且不是最后一个。则用next_e返回它的后继元素，否则操作失败，next_e无意义</p><ul><li>10.ListInsert(&amp;L,i,&amp;e)</li></ul><p>​ 线性表L存在的情况下,1&lt;=i&lt;=ListLength(L)+1</p><p>​ 在L的第i个位置之前插入新的数据元素e，L的长度加一</p><ul><li>11.ListDelete(&amp;L,i,&amp;e)</li></ul><p>​ 线性表L存在的情况下,1&lt;=i&lt;=ListLength(L)</p><p>​ 删除L的第i个数据元素，并用e返回其值，L的长度减一</p><ul><li>12.ListTraverse(&amp;L,visited())</li></ul><p>​ 线性表L存在的情况下</p><p>​ 依次对线性表中每个元素调用visited()函数</p><p>以上运算操作是逻辑结构上定义的运算。只要给出这些运算的功能是“做什么”，至于”如何做“等实现细节，只有待确定了存储结构之后才考虑</p><h3 id="_3-线性表的顺序表示和实现" tabindex="-1"><a class="header-anchor" href="#_3-线性表的顺序表示和实现" aria-hidden="true">#</a> 3.线性表的顺序表示和实现</h3><p>在计算机内，线性表有两种基本的存储结构：<code>顺序存储结构</code>和<code>链式存储结构</code></p><p>**顺序存储定义：**把逻辑上相邻的数据元素存储在物理上相邻的存储单元中的存储结构</p><p>所有数据元素的存储位置均可由第一个数据元素的存储位置得到： $$ LOC(a_i) = LOC(a_1) + (i-1)\\times l $$</p><h2 id="_3-散列表" tabindex="-1"><a class="header-anchor" href="#_3-散列表" aria-hidden="true">#</a> 3.散列表</h2><p>使用散列表要解决好两个问题： <strong>1.构造好的散列函数</strong> （a）所选的函数尽可能简单，以便提高转换速度 （b）所选函数对关键码计算出的地址，应在散列地址集中均匀分布，以减少空间浪费 <strong>2.制定一个好的解决冲突的方案</strong> 查找时，如果散列函数计算出的地址中查不到关键码，则应当依据解决冲突的规则，有规律地查询其它相关单元。</p><h3 id="散列函数的构造方法" tabindex="-1"><a class="header-anchor" href="#散列函数的构造方法" aria-hidden="true">#</a> 散列函数的构造方法</h3><h4 id="_1-直接定址法" tabindex="-1"><a class="header-anchor" href="#_1-直接定址法" aria-hidden="true">#</a> 1.直接定址法</h4><p>$$ Hash(key) = a\\times key + b $$ 优点：以关键码key的某个线性函数为散列地址，不会产生冲突 缺点：要占用连续地址空间，空间效率低</p><h4 id="_2-除留余数法" tabindex="-1"><a class="header-anchor" href="#_2-除留余数法" aria-hidden="true">#</a> 2.除留余数法</h4><p>$$ Hash(key) = （key） mod （p） $$ p是一个整数。</p><p>技巧： 设表长为m，取p&lt;=m且为质数</p><h3 id="解决冲突" tabindex="-1"><a class="header-anchor" href="#解决冲突" aria-hidden="true">#</a> 解决冲突</h3><h4 id="_1-开放定址法" tabindex="-1"><a class="header-anchor" href="#_1-开放定址法" aria-hidden="true">#</a> 1.开放定址法</h4><p>基本思想：有冲突时就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将数据元素存入</p><p><strong>常用方法：</strong> 1.<strong>线性探测法</strong>：当前位置有冲突，就在该位置的基础上上+1，如果+1后还是有冲突，就+2，以此类推 2.<strong>二次探测法</strong>：v当前位置有冲突，就在该位置上的基础上+$1^2$，如果+$1^2$后还是有冲突，就-$1^2$；如果还是存在冲突，就查找+$2^2$，-$2^2$。。。以此类推 3.<strong>伪随机探测法</strong>：当前位置有冲突，在当前位置上加上一个随机数</p><h4 id="_2-链地址法-拉链法、分离链接" tabindex="-1"><a class="header-anchor" href="#_2-链地址法-拉链法、分离链接" aria-hidden="true">#</a> 2.链地址法（拉链法、分离链接）</h4><p>基本思想：相同散列地址的记录链成一张单链表 m个散列地址就设m个单链表，然后用一个数组将m个单链表的表头指针存储起来，形成一个动态的结构</p><p>链地址法建立散列表步骤： 1.取数据元素的关键字key，计算其散列函数值（地址）。若该地址对应的链表为空，则将该元素茶如此链表；否则执行步骤2解决冲突 2.根据选择的冲突处理方法，计算关键字key的下一个存储地址。若该地址对应的链表不为空，则利用链表的前插法或后插法将该元素插入此链表。</p><p><strong>优点：</strong> 1.非同义词不会冲突，无聚集现象 2.链表上的节点空间动态申请，更适合于表长不确定的情况</p><h3 id="散列表的查找" tabindex="-1"><a class="header-anchor" href="#散列表的查找" aria-hidden="true">#</a> 散列表的查找</h3><p>散列表是基于数组实现的，由于数组的查询速度是非常快的，可以通过它的下标在内存中快速的找到它的位置，把它的所对应的值拿出来。</p><p>但是字典这种数据结构，是通过键值对这样的方式来存储的，想找到其中的某个键所对应的值，最坏的情况就是遍历整个字典才能找到。</p><p>如果将字典的键转换为数组的下标，就可以利用数组的特性快速的进行查找</p>`,92),i=[t];function l(o,r){return n(),s("div",null,i)}const u=a(e,[["render",l],["__file","1.html.vue"]]);export{u as default};
