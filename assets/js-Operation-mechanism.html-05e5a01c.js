import{_ as i,a0 as e,a1 as l,a4 as p}from"./framework-16947f8e.js";const t={},a=p('<h1 id="js运行机制" tabindex="-1"><a class="header-anchor" href="#js运行机制" aria-hidden="true">#</a> JS运行机制</h1><h2 id="运行环境" tabindex="-1"><a class="header-anchor" href="#运行环境" aria-hidden="true">#</a> 运行环境</h2><p><strong>支持环境：</strong></p><ul><li>浏览器</li><li>webview</li><li>WebApp（Hybrede混合App）</li><li>NodeJS</li></ul><p><strong>栈内存：</strong></p><p>浏览器能够运行JS代码，是因为提供了代码运行的环境：栈内存（Stack）</p><ul><li>栈内存也是从计算机的内存分配出来的一块内存</li><li><code>执行环境栈（栈内存）</code>，Execution Context Stack（ECStask）提供代码执行的环境</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>栈内存和堆内存的区别：</p><p>二者都是内存</p><p>栈用于执行代码，存储基本数据类型（原始值类型）</p><p>堆用于存储对象、函数</p><p>二者是独立的，不相互包含的内存空间</p></div><p>执行代码的过程中，为了区分是在哪个环境下执行（全局/函数/块），首先会产生一个执行上下文EC</p><ul><li>EC（G）全局上下文，全局代码在这里执行</li><li>EC（X）某个函数的执行上下文</li><li>（F）EC</li></ul><h2 id="执行过程" tabindex="-1"><a class="header-anchor" href="#执行过程" aria-hidden="true">#</a> 执行过程</h2><p><strong>等号赋值的过程：</strong></p><ul><li><p>1.创建值</p><p>原始值类型的值，是直接存储在栈内存中的；对象数据类型值是需要单独开辟内存存储的（堆内存Heap）</p></li><li><p>2.声明变量（declare）</p></li></ul><p>​ var/function/let/const/import</p><p>​ 把声明的变量存储在当前所处上下文的变量对象中，例如：EC（G）</p><ul><li>3.赋值操作</li></ul><p>​ 赋值操作，即定义（defined）数据，所以声明变量没有赋值叫做undefined</p><p>​ 按照计算机的底层机制，赋值操作是指针的指向和关联</p><p><strong>创建对象数据类型（函数除外）过程：</strong></p><ul><li>1.不能直接存储在栈中</li></ul><p>​ 开辟一个单独的内存（堆内存）。为了后期访问这个内存，都会赋予内存一个16进制的地址</p><ul><li>2.把对象中的键值对依次存储到堆内存中</li><li>3.把内存的地址放置在栈中供变量引用</li></ul>',22),n=[a];function r(s,o){return e(),l("div",null,n)}const d=i(t,[["render",r],["__file","js-Operation-mechanism.html.vue"]]);export{d as default};
