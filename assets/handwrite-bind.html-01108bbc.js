import{_ as n,a0 as s,a1 as a,a4 as t}from"./framework-786d5328.js";const p={},o=t(`<h1 id="手写-bind" tabindex="-1"><a class="header-anchor" href="#手写-bind" aria-hidden="true">#</a> 手写 bind</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> other</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> message<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;clean&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//  直接调用</span>
<span class="token function">say</span><span class="token punctuation">(</span><span class="token string">&quot;hello &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hi &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// myBind调用</span>
<span class="token keyword">let</span> saytoclean <span class="token operator">=</span> say<span class="token punctuation">.</span><span class="token function">myBind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">saytoclean</span><span class="token punctuation">(</span><span class="token string">&quot;ya~~ &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.往 Function 的原型对象上添加了一个 myBind 方法，以便所有的函数可以访问的到。</p><p>2.myBind 方法接收需要绑定的 this 指向，以及参数参数列表</p><p>3.myBind 方法中的 this 指向当前调用该方法的函数</p><p>4.返回一个新的函数，该函数可以接收额外的参数列表</p><p>5.将两个参数列表通过 concat 方法连接起来</p><p>6.调用该函数后实现</p>`,8),e=[o];function c(i,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","handwrite-bind.html.vue"]]);export{k as default};
