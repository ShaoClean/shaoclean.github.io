import{_ as e,a0 as p,a1 as i,a4 as l}from"./framework-16947f8e.js";const t={},a=l('<h1 id="http-各版本-1-0-1-1-2-0-3-0" tabindex="-1"><a class="header-anchor" href="#http-各版本-1-0-1-1-2-0-3-0" aria-hidden="true">#</a> HTTP 各版本（1.0/1.1/2.0/3.0）</h1><h2 id="http1-0" tabindex="-1"><a class="header-anchor" href="#http1-0" aria-hidden="true">#</a> HTTP1.0</h2><p>HTTP1.0 把我们带入到了互联网时代，有以下优点：</p><ul><li><p>简单易扩展</p><p>使用的人可以根据自己的需求自定义配置请求信息：请求方式、请求路径、请求参数等</p></li><li><p>跨平台</p><p>只要满足 HTTP 的传输协议，都可以进行传输</p></li></ul><p>HTTP1.0 规定浏览器和服务器保持短暂的链接。</p><p>浏览器每次请求都需要与服务器建立一个 TCP 连接，服务器处理完成以后立即断开 TCP 连接（无连接），服务器不跟踪也每个客户单，也不记录过去的请求（无状态）。</p><p>这种无状态性可以借助 cookie/session 机制来做身份认证和状态记录。</p><p><strong>存在问题：</strong></p><ul><li><p>队头阻塞（head of line block）</p><p>每一个请求，都需要等待服务器响应完成后，才能进行下一个请求</p></li><li><p>无法复用连接</p><p>每次客户端向服务器请求资源的时候，都需要建立一次 TCP 连接，每次完成响应后都需要断开 TCP 的连接。这意味着每一次请求资源都需要进行三次握手四次挥手，将会造成性能问题。</p></li><li><p>无状态</p><p>HTTP 传输是无状态的，意味着服务器不会识别到你是谁，只要遵循协议就可以进行传输。解决办法是 cookie、session、token、jwt 等。</p></li></ul><h2 id="http1-1" tabindex="-1"><a class="header-anchor" href="#http1-1" aria-hidden="true">#</a> HTTP1.1</h2><ul><li><p>管道化传输（长时间连接）</p><ul><li>与 HTTP1.0 不同，HTTP1.1 可以保持长时间的 TCP 连接。也就是说每次客户端请求服务器时不必再需要像 HTTP1.0 中的那样每次都重新建立 TCP 连接了，这样做的好处最明显的一点就是减少了性能方面的问题。</li><li>实现并行传输。客户端不再需要像 HTTP1.0 版本那样，等待收到上一个请求的响应结果再进行二次请求。一次性可以发送多个请求，但不能同时得到响应结果，只能等待服务器完成上一个请求的响应才能接着进行响下一个请求。所以这看上去和 HTTP1.0 版本没什么太大的差别，没有正真的实现并行请求。</li></ul></li><li><p>加入新的请求方法</p><p>例如<code>OPTIONS</code>、<code>DELETE</code>、<code>PUT</code>等请求方法</p></li><li><p>加入新的请求头、响应头</p><ul><li>增加了缓存处理（强缓存和协商缓存）</li><li>增加新的字段<code>cache-control</code>，</li><li>支持断点传输</li><li>增加了<code>Host</code>字段，使得一个服务器可以用来建立多个 WEB 站点</li></ul></li></ul><h2 id="http2-0" tabindex="-1"><a class="header-anchor" href="#http2-0" aria-hidden="true">#</a> HTTP2.0</h2><ul><li><p>二进制分帧</p><p>在应用层和传输层中间加入了二进制分帧层。于是请求和响应数据分割成了最小单位帧。 这样就可以采用二进制的格式来传输数据，相比之前的文本格式，解析起来更高效。</p></li><li><p>多路复用</p><p>多路复用同时发送数据的实现条件：</p><p>建立一个TCP连接，该连接中数据以流的形式传输，每个数据流都通过<code>消息</code>的形式来传输数据;消息的最小单位是<code>帧</code>,一个消息由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的标识重新组装。</p><p>所有 HTTP2.0 版本的通信都建立在一个连接上，这个连接中的数据流向是双向的。 在一个连接中，客户端和浏览器可以同时发送多个请求和响应，而且不用按照顺序一一对应，这样就避免了<code>“队头堵塞”</code>。</p></li><li><p>首部压缩</p><p>在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送。 也就是说请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销。</p></li><li><p>服务器推送</p></li></ul><h2 id="http3-0" tabindex="-1"><a class="header-anchor" href="#http3-0" aria-hidden="true">#</a> HTTP3.0</h2>',14),o=[a];function d(h,c){return p(),i("div",null,o)}const T=e(t,[["render",d],["__file","http-version.html.vue"]]);export{T as default};
