import{_ as n,a0 as s,a1 as a,a4 as e}from"./framework-16947f8e.js";const p={},t=e(`<h1 id="前端工程化" tabindex="-1"><a class="header-anchor" href="#前端工程化" aria-hidden="true">#</a> 前端工程化</h1><p>最终<code>webpack.config.js</code>和<code>package.json</code>配置<a href="&#39;/clog/demo/&#39;">在这里</a></p><h2 id="一、项目初始化" tabindex="-1"><a class="header-anchor" href="#一、项目初始化" aria-hidden="true">#</a> 一、项目初始化</h2><p>1.初始化 npm 项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> init <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><p>新建<code>src</code>文件夹，<code>src</code>目录下新建<code>index.js</code>文件;</p><p>新建<code>webpack.config.js</code>文件；</p><p>新建<code>public</code>文件夹，<code>public</code>文件夹下新建<code>index.html</code>文件</p></li><li><p>安装 webpack 相关依赖</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> webpack webpack-cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>修改 webpack.config.js 文件中的配置：</li></ol><div class="language-JS line-numbers-mode" data-ext="JS"><pre class="language-JS"><code>const path = require(&#39;path&#39;);
module.exports = {
    mode: &quot;development&quot;,
    //项目入口文件，字符串形式
    // entry: &#39;./src/index.js&#39;,
    //对象形式
    entry: {
        bundle:&#39;./src/index.js&#39;
    },
    //项目输出配置
    output: {
        //打包后输出的文件名，固定名字
        // filename: &quot;bundle.js&quot;,
        //打包后输出的文件名，变量名字。这里的[name]值由entry决定，如果entry是字符串形式，则使用默认的名字main；如果entry是对象形式，则对象的键为打包后的文件名
        filename: &quot;js/[name].js&quot;,
        //也可以使用hash变量，每次打包后的值都不同
        // filename: &quot;[hash].js&quot;,
        //文件输出路径
        path: path.resolve(__dirname,&quot;./dist&quot;)
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>修改 package.json 中的 scripts 中的脚本,初始化打包功能</li></ol><div class="language-JSON line-numbers-mode" data-ext="JSON"><pre class="language-JSON"><code>  &quot;scripts&quot;: {
    &quot;build&quot;: &quot;webpack&quot;
  },
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>在 public 目录下的 index.html 文件中引入 bundle.js</li></ol><h2 id="二、项目改造" tabindex="-1"><a class="header-anchor" href="#二、项目改造" aria-hidden="true">#</a> 二、项目改造</h2><h3 id="script-标签自动引入" tabindex="-1"><a class="header-anchor" href="#script-标签自动引入" aria-hidden="true">#</a> Script 标签自动引入</h3><ol><li><p>删除项目中的所有 script 标签以及 link 标签的引用</p></li><li><p>安装插件,用于自动引入 script 标签到 html 文件中</p></li></ol><p>解决问题：文件名使用 hash 或者其它变动较大的值时，每次打包都需要重新在 html 文件中引入，非常麻烦。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i html-webpack-plugin --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>在 webpack.config.js 中引入新安装的 Plugin</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;html-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li><p>将 html-webpack-plugin 添加到新的 plugins 配置项中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">//src文件夹下模版的名称</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;index.html&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">//src文件夹下模版的地址</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.html&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行打包命令测试一下，发现生成两个文件，并且在 index.html 文件中自动注入了 script 标签</p></li></ol><h3 id="css-自动注入" tabindex="-1"><a class="header-anchor" href="#css-自动注入" aria-hidden="true">#</a> CSS 自动注入</h3><p>1.安装 css 相关的 loader</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> css-loader style-loader
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>css-loader 帮助我们解析 css 成为 js 对象</li><li>sytle-loader 可以从 css-loader 解析的对象中提取 css 样式挂载到页面当中</li></ul><p>2.在 src 文件夹下的 index.js 通过模块化的方式导入 css 文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;./css/public.css&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;./css/index.css&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.新增 module 配置项</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>module<span class="token operator">:</span> <span class="token punctuation">{</span>
        rules<span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//匹配所有.css结尾的文件</span>
                test<span class="token operator">:</span> /\\.css$/<span class="token punctuation">,</span>
                <span class="token comment">//将匹配到的所有相关文件使用以下两个loader进行预处理，loader处理的顺序为从右到左</span>
                use<span class="token operator">:</span> <span class="token punctuation">[</span>&#39;style-loader&#39;<span class="token punctuation">,</span>&#39;css-loader&#39;<span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><p>执行打包命令进行打包测试，发现报错了，原因是因为没有对图片进行处理。webpack5 之前使用<code>file-loader</code>或者是<code>url-loader</code>来解决这一问题。webpack5 中使用<code>ModuleAssets</code>这一新特性来解决</p></li><li><p>相关配置如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>module<span class="token operator">:</span> <span class="token punctuation">{</span>
        rules<span class="token operator">:</span> <span class="token punctuation">[</span>
 						<span class="token comment">//...</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//匹配图片格式文件，并忽略大小写</span>
                test<span class="token operator">:</span> /\\.(png|svg|jpg|jpeg|gif)$/i<span class="token punctuation">,</span>
                <span class="token comment">//启动webpack5中内置的ModuleAsset特性</span>
                type<span class="token operator">:</span> <span class="token string">&quot;asset&quot;</span><span class="token punctuation">,</span>
                parser<span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token comment">//如果一个模块源码大小小于指定的maxSize值，模块会被作为一个Base64编码的字符串注入到打包结果中，否则模块文件将会被生成到输出的目标目录中。</span>
                    <span class="token comment">//图片格式，正好可以使用Base64来做处理，所以可以巧妙地使用这一个parser</span>
                    dataUrlCondition<span class="token operator">:</span><span class="token punctuation">{</span>
                        maxSize<span class="token operator">:</span><span class="token number">4</span> * <span class="token number">1024</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                generator<span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token comment">//[hash:6]表示使用6位哈希值，使用hash防止图片重名</span>
                    <span class="token comment">//[ext]表示原本后缀值</span>
                    filename<span class="token operator">:</span> &#39;images/<span class="token punctuation">[</span>name<span class="token punctuation">]</span>.<span class="token punctuation">[</span>hash<span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ext<span class="token punctuation">]</span>&#39;
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="js-自动注入" tabindex="-1"><a class="header-anchor" href="#js-自动注入" aria-hidden="true">#</a> JS 自动注入</h3><ol><li>在 src 文件夹下的 index.js 文件中引入 js</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//没有按照模块化，所以没有导出，直接引入就可以</span>
<span class="token keyword">import</span> <span class="token string">&quot;./js/jquery-1.12.4.min&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;./js/public&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;./js/nav&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;./js/jquery.flexslider-min&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>执行打包命令，发现 bundle 文件非常的大，达到 180 多 kb。还存在<code>$</code>不存在的问题需要解决，通过 webpack 内置插件<code>ProvidePlugin</code>来解决</p></li><li><p>了解<code>ProvidePlugin</code>，官网的解释：</p></li></ol><blockquote><p>Automatically load modules instead of having to <code>import</code> or <code>require</code> them everywhere.</p></blockquote><p>自动的去导入模块，而不是手动的去导入。</p><ol start="4"><li>安装 jquery、flexslider</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i jquery flexslider
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>在 webpack.config.js 中引入新安装的 Plugin</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">//...</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">//完成变量于库之间的映射（自动导入）</span>
      <span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token string">&quot;jquery&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">jQuery</span><span class="token operator">:</span> <span class="token string">&quot;jquery&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>删除掉 src/index.js 中关于 jQuery 的引用，因为在配置中已经自动导入了，可以在任何地方使用。</li></ol><h3 id="图片自动注入" tabindex="-1"><a class="header-anchor" href="#图片自动注入" aria-hidden="true">#</a> 图片自动注入</h3><p>html 中直接使用 img 标签 src 加载图片的话，因为没有被依赖，图片将不会被打包。这个 loader 解决这个问题，图片会被打包，而且路径也处理妥当。</p><p>所以使用第三方 loader 来做这件事</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i html-withimg-loader
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 webpack.config.js 中添加新的 loader 配置项：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.html$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;html-withimg-loader&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者使用一个官方的 Plugin 来解决(复制文件到指定路径下)：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i copy-webpack-plugin <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//webpack.config.js</span>
<span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;copy-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">patterns</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">from</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./src/img&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token literal-property property">to</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./dist/img&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、项目优化" tabindex="-1"><a class="header-anchor" href="#三、项目优化" aria-hidden="true">#</a> 三、项目优化</h2><p>一般打包完成之后只有一个 bundle.js 文件，包含了项目中用到的所有 js、css，档切换到一个页面的时候，新的页面也同样会加载 bundle.js 文件。这样就出现了一个问题，有很多无关的代码是本页面用不到的，会造成资源上的浪费，所以要进行优化。</p><h3 id="js-分离" tabindex="-1"><a class="header-anchor" href="#js-分离" aria-hidden="true">#</a> js 分离</h3><p>配置多个入口文件，使每一个页面单独使用一个 js 文件，而不是所有页面公用一个 bundle.js 文件，可以理解为代码分割，达到优化的目的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">index</span><span class="token operator">:</span><span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">login</span><span class="token operator">:</span><span class="token string">&#39;./src/login.js&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token comment">//src文件夹下模版的名称</span>
            <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;index.html&quot;</span><span class="token punctuation">,</span>
            <span class="token comment">//src文件夹下模版的地址</span>
            <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.html&quot;</span><span class="token punctuation">,</span>
          	<span class="token comment">//和entry中的键名相对应</span>
            <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token comment">//src文件夹下模版的名称</span>
            <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;login.html&quot;</span><span class="token punctuation">,</span>
            <span class="token comment">//src文件夹下模版的地址</span>
            <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;./src/login.html&quot;</span><span class="token punctuation">,</span>
          <span class="token comment">//和entry中的键名相对应</span>
            <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">$</span><span class="token operator">:</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">jQuery</span><span class="token operator">:</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="开发服务器配置" tabindex="-1"><a class="header-anchor" href="#开发服务器配置" aria-hidden="true">#</a> 开发服务器配置</h3><p>安装命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> webpack-dev-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>webpack-dev-server 主要原理：通过 webpack 将项目进行构建，将打包后的内容放在内存里面，所以可以很容易监视到是否发生变化，实现更快速度的动态更新</p><p><strong>注意！！</strong></p><p>只能监视 js/css 的变化！！！HTML 不可以监视到！！</p><blockquote><p>在源代码中 CSS/JS 产生修改时，会立刻在浏览器中进行更新，这几乎相当于在浏览器 devtools 直接更改样式。</p></blockquote><p>在 package.json 中配置：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack-dev-server&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="从-bundle-剥离-css" tabindex="-1"><a class="header-anchor" href="#从-bundle-剥离-css" aria-hidden="true">#</a> 从 bundle 剥离 css</h3><p>安装插件，剥离 css 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> mini-css-extract-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//webpack.config.js</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token comment">//匹配所有.css结尾的文件</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token comment">//将匹配到的所有相关文件使用以下两个loader进行预处理，loader处理的顺序为从右到左</span>
        <span class="token comment">// use: [&#39;style-loader&#39;,&#39;css-loader&#39;],</span>
        <span class="token comment">//要使用css剥离功能，就不需要用到style-loader了，而是转用为剥离用的loader</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">//剥离后使用Plugin生成css文件</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;css/[name].css&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">&quot;css/[name].chunk.css&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于我们使用了 WebpackHtmlPlugin,所以生成的 css 文件会自动以<code>&lt;link&gt;</code>标签的形式出现在 html 文件中</p><h3 id="压缩文件" tabindex="-1"><a class="header-anchor" href="#压缩文件" aria-hidden="true">#</a> 压缩文件</h3><ul><li>去除注释</li><li>去除缩进</li><li>treeshaking</li></ul><h4 id="js-压缩" tabindex="-1"><a class="header-anchor" href="#js-压缩" aria-hidden="true">#</a> js 压缩</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i uglifyjs-webpack-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//webpack.config.js</span>
<span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;uglifyjs-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token comment">//...},</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token comment">//...},</span>
  <span class="token comment">//在loader对文件预处理之后的一个优化阶段，对资源文件进行一个优化（压缩、剥离等操作）</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">//在development模式下对代码进行压缩</span>
        <span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">sourceMap</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="css-压缩" tabindex="-1"><a class="header-anchor" href="#css-压缩" aria-hidden="true">#</a> css 压缩</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i css-minimizer-webpack-plugin <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//webpack.config.js</span>
<span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;uglifyjs-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token comment">//...},</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token comment">//...},</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">//在development模式下对代码进行压缩</span>
        <span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token keyword">new</span> <span class="token class-name">CssMiniPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking" aria-hidden="true">#</a> Tree Shaking</h3><p>将一些未使用的代码删除掉。</p><p>以 lodash 为例：</p><p>安装 lodash:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i lodash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="文件-treeshaking" tabindex="-1"><a class="header-anchor" href="#文件-treeshaking" aria-hidden="true">#</a> 文件 TreeShaking</h4><p>导入并使用 lodash 中的一个方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">&quot;lodash&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>重新打包后，原来的 index.js 文件大小为 396KB，打包后的 index.js 文件大小为 950KB。</p><blockquote><p>通过结构的方式来导入文件，可以触发 TreeShaking</p></blockquote><p>修改完后发现大小还是一样，并没有触发 TreeShaking。</p><p><strong>触发 TreeShaking 的条件</strong></p><blockquote><p>1.通过结构的方式来导入文件，可以触发 TreeShaking</p><p>2.调用的 npm 包必须使用 ESM</p></blockquote><p>以上 TreeShaking 是不同文件的 TreeShaking，也就是说 lodash 中有好多方法，每一个方法都写在不同的文件中。没有使用到的方法，也就相当于没有使用到的文件，就不会被打包进来。</p><p>安装符合 ESM 规范的 lodash 包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-S</span> lodash-es
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重新打包后发现大小从之前的 950KB 变成了 474KB</p><h4 id="同一文件不同数据的-treeshaking" tabindex="-1"><a class="header-anchor" href="#同一文件不同数据的-treeshaking" aria-hidden="true">#</a> 同一文件不同数据的 TreeShaking</h4><p><strong>那么面对同一个文件中的方法，会如何处理？</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//webpack.config.js</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码分割-重点" tabindex="-1"><a class="header-anchor" href="#代码分割-重点" aria-hidden="true">#</a> 代码分割（重点）</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将HtmlWebpackPlugin代码分割的多个文件更细分的分割</span>
        <span class="token literal-property property">splitChunks</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token comment">// 1.通过chunks：all来启用代码的拆分</span>
            <span class="token literal-property property">chunks</span><span class="token operator">:</span><span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span>
            <span class="token comment">// 2.通过minSize来调节分离出来的包的大小（注意被分离的包需要在node_modules中）</span>
            <span class="token literal-property property">minSize</span><span class="token operator">:</span><span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>
            <span class="token comment">// 3.修改分割后导出的包的名字</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;chunk&#39;</span><span class="token punctuation">,</span>
            <span class="token comment">// 4.缓存组。通过这个配置，将node_modules中特定的库给抽离出来</span>
            <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span><span class="token punctuation">{</span>
                <span class="token comment">// 对象的名字可以随便起，为了方便理解建议用对应库的名称</span>
                <span class="token literal-property property">jquery</span><span class="token operator">:</span><span class="token punctuation">{</span>
                    <span class="token comment">// 分割出来后文件的名称</span>
                    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;jquery-chunks&#39;</span><span class="token punctuation">,</span>
                    <span class="token comment">// 匹配node_modules中库的名称</span>
                    <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">jquery</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
                    <span class="token literal-property property">chunks</span><span class="token operator">:</span><span class="token string">&#39;all&#39;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token string-property property">&#39;lodash-es&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span>
                    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;lodash-es-chunks&#39;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">lodash-es</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
                    <span class="token literal-property property">chunks</span><span class="token operator">:</span><span class="token string">&#39;all&#39;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 最后通过HtmlWebpackPlugin将分离出来的代码通过标签的形式注入到页面中</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码简单的实现了 js 文件的代码分割，将整个 index.js 分割成了 index.js 和 chunk.js</p><h3 id="清除-dist-多余文件" tabindex="-1"><a class="header-anchor" href="#清除-dist-多余文件" aria-hidden="true">#</a> 清除 dist 多余文件</h3><p>每次打包的时候，如果出现不同的文件名，之前的文件不会覆盖，而是依旧存在，需要手动去删除，可以用插件来自动删除。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i clean-webpack-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;clean-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,104),i=[t];function l(o,c){return s(),a("div",null,i)}const u=n(p,[["render",l],["__file","frontend-engineering.html.vue"]]);export{u as default};
