import{_ as p,a0 as e,a1 as o,a2 as n,a3 as s,a5 as c,a6 as l,a4 as a,C as i}from"./framework-786d5328.js";const u={},d=a('<h1 id="vue3函数式组件-不使用模板" tabindex="-1"><a class="header-anchor" href="#vue3函数式组件-不使用模板" aria-hidden="true">#</a> Vue3函数式组件（不使用模板）</h1><p>为什么需要用到函数式组件？其实绝大部分场景是用不到的，用vue模板的形式足够使用了。</p><p>由于我长期使用vue模板的形式来创建组件，所以每次使用组件的时候很容易形成一个习惯，自然而然的以为使用组件的流程一定是：</p><ul><li>1.使用<code>.vue</code>文件定义一个组件</li><li>2.在其它<code>.vue</code>文件的<code>template</code>模板中使用该组件</li></ul><p>但是在某一些特殊的场景，例如在封装的<code>ajax</code>请求的过程中，请求失败时需要弹出一个弹窗，此时是没有<code>template</code>模板给我们使用这个组件的。 此时如何实现组件的渲染就成了很大的问题。</p><p>再例如，封装了一个hook，在hook中需要生成组件，也需要用到函数式组件，普通的vue模板的形式很难做到。</p><h2 id="_1-核心思路" tabindex="-1"><a class="header-anchor" href="#_1-核心思路" aria-hidden="true">#</a> 1.核心思路</h2><p>使用纯js生成组件核心思路其实就只有两步：</p><ul><li>1.创建虚拟dom（vnode）</li><li>2.渲染成真实节点（render）</li></ul><p>实现这这两步需要用到两个核心函数:</p>',10),k=n("p",null,[n("code",null,"h()函数"),s("：")],-1),r=n("code",null,"h()",-1),v=n("li",null,[n("p",null,[n("code",null,"render()函数"),s("：")]),n("p",null,[n("code",null,"render()"),s("函数用于渲染虚拟dom，将虚拟dom变成真实dom放置到页面指定节点。它接收两个参数：")]),n("ul",null,[n("li",null,[s("第一个参数：vnode ｜ component，虚拟节点或"),n("code",null,".vue"),s("文件")]),n("li",null,"第二个参数：需要挂载的节点")])],-1),m=a(`<h2 id="_2-代码实现" tabindex="-1"><a class="header-anchor" href="#_2-代码实现" aria-hidden="true">#</a> 2.代码实现</h2><p>由于<code>h()</code>函数第一个参数可以接收多种不同类型，主要来讲一下<code>Component</code>类型(.vue组件)和<code>Function</code>类型(函数组件)的两种情况</p><h3 id="component类型" tabindex="-1"><a class="header-anchor" href="#component类型" aria-hidden="true">#</a> Component类型</h3><p>这种方式比较好理解，也是比较常见的方法，一般开发用这种方法对我来说是最舒服的。</p><p>首先按照正常的方式定义一个vue组件：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">//SayHi.vue</span>
<span class="token keyword">const</span> props <span class="token operator">=</span> defineProps<span class="token operator">&lt;</span><span class="token punctuation">{</span>
    <span class="token literal-property property">msg</span><span class="token operator">:</span>string
<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>say<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>clike me say hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>index.ts</code>中引入：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span>render<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> SayHiVue <span class="token keyword">from</span> <span class="token string">&#39;./SayHi.vue&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 1.vue模板实现</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>msg<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// createVNode 和 h 函数相同，只是h函数使用起来比较方便；可以创建vnode</span>
    <span class="token comment">// const vnode = createVNode(SayHi，{msg});</span>
    <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>SayHiVue<span class="token punctuation">,</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以根据自己业务场景的不同给h函数传入参数。</p><p>在需要用到的地方调用函数即可生效，生成的组件其实不在当前组建上，而是挂载到了<code>body</code>上。</p><p>比如说<code>App.vue</code>中</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> SayHi <span class="token keyword">from</span> <span class="token string">&#39;./say-hi/index&#39;</span>
<span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token string">&#39;im app button&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="function类型" tabindex="-1"><a class="header-anchor" href="#function类型" aria-hidden="true">#</a> Function类型</h3><p>定义一个Function类型的函数,关于函数式组件的说明，官网是这样定义的：</p><blockquote><p>函数式组件是一种定义自身没有任何状态的组件的方式。它们很像纯函数：接收 props，返回 vnodes。函数式组件在渲染过程中不会创建组件实例 (也就是说，没有 this)，也不会触发常规的组件生命周期钩子。 我们用一个普通的函数而不是一个选项对象来创建函数式组件。该函数实际上就是该组件的渲染函数。 函数式组件的签名与 setup() 钩子相同</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">SayHiTs</span><span class="token punctuation">(</span>props<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">,</span><span class="token punctuation">{</span>emit<span class="token punctuation">,</span>slot<span class="token punctuation">,</span>attr<span class="token punctuation">}</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token function-variable function">onClick</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;SayHi&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;im SayHiTs click!!!!!&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>props<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//声明父组件可以监听的事件</span>
SayHiTs<span class="token punctuation">.</span>emits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;SayHi&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>index.ts</code>中引入：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>msg<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">,</span>fn<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">Function</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>SayHiTs<span class="token punctuation">,</span><span class="token punctuation">{</span>
        msg<span class="token punctuation">,</span>
        <span class="token function">onSayHi</span><span class="token punctuation">(</span>data<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            fn<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;pass data:&#39;</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>onSayHi</code>相当于定义了一个自定义事件，以<code>onXXX</code>的形式来定义一个事件</p></div><p>在需要用到的地方使用， 比如说<code>App.vue</code>中</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> SayHiTs <span class="token keyword">from</span> <span class="token string">&#39;./say-hi/index&#39;</span>
<span class="token function">SayHiTs</span><span class="token punctuation">(</span><span class="token string">&#39;im app&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hi im app&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21);function g(b,h){const t=i("RouterLink");return e(),o("div",null,[d,n("ul",null,[n("li",null,[k,n("p",null,[r,s("函数用于生成一个虚拟dom（vnode），详情见"),c(t,{to:"/study/frontend/vue/h.html"},{default:l(()=>[s("h()函数")]),_:1})])]),v]),m])}const f=p(u,[["render",g],["__file","function-component.html.vue"]]);export{f as default};
