import{_ as e,a0 as a,a1 as r,a4 as i}from"./framework-16947f8e.js";const c={},o=i('<h1 id="浏览器缓存机制" tabindex="-1"><a class="header-anchor" href="#浏览器缓存机制" aria-hidden="true">#</a> 浏览器缓存机制</h1><h2 id="强制缓存" tabindex="-1"><a class="header-anchor" href="#强制缓存" aria-hidden="true">#</a> 强制缓存</h2><p>当浏览器向服务器发起请求时，服务器会将缓存规则放入 HTTP 响应报文的 HTTP 头中，和响应结果一起发送给浏览器，控制强制缓存的字段分别是 Expires 和 Cache-Control，其中 Cache-Control 优先级比 Expires 高。</p><p><strong>什么是强制缓存？</strong> 强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程，强制缓存的情况主要有三种。</p><ul><li>1.不存在该缓存结果和缓存标识，则直接向服务器发起请求</li><li>2.存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存</li><li>3.存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果。就不用再将请求发送给服务器了。</li></ul><h2 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a> 协商缓存</h2><p>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况</p><ul><li><p>1.发送HTTP请求，该请求的缓存结果失效，则只返回缓存标识；携带该资源的缓存标识，发起HTTP请求;由服务器判断该资源是否更新，服务器判断该资源没有更新所以直接返回结果，然后再由浏览器后去该请求的缓存结果，之后由<code>浏览器缓存</code>返回该请求的缓存结果</p></li><li><p>2.发送HTTP请求，该请求的缓存结果失效，则只返回缓存标识；携带该资源的缓存标识，发起HTTP请求;由服务器判断该资源是否更新，服务器判断该资源更新了，重新返回结果，将该请求结果和缓存标识存入<code>浏览器缓存</code>中</p></li></ul>',8),t=[o];function l(h,d){return a(),r("div",null,t)}const s=e(c,[["render",l],["__file","browser-cache.html.vue"]]);export{s as default};
