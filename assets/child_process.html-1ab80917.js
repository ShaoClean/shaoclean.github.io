import{_ as n,a0 as s,a1 as a,a4 as t}from"./framework-786d5328.js";const p={},e=t(`<h1 id="node创建子进程" tabindex="-1"><a class="header-anchor" href="#node创建子进程" aria-hidden="true">#</a> Node创建子进程</h1><p>在NodeJS中，我们的JS代码运行在它单个进程的单个线程上。一个JS执行进程只能利用一个CPU核心，而大多数CPU都是多核CPU，为了充分利用CPU资源，Node提供了两个模块来创建子进程。<code>child_process</code>和<code>cluster</code>两个模块</p><h2 id="创建子进程" tabindex="-1"><a class="header-anchor" href="#创建子进程" aria-hidden="true">#</a> 创建子进程</h2><h3 id="child-process模块" tabindex="-1"><a class="header-anchor" href="#child-process模块" aria-hidden="true">#</a> child_process模块</h3><p>创建子进程有四个方法：</p><ol><li>spawn</li><li>exec</li><li>execFile</li><li>fork</li></ol><p>这四种方式创建的子进程都是异步的，并且在执行完子进程中的代码后不会自动关闭，需要手动去关闭。为了防止占用系统太多的资源或内存泄露，应该及时关闭。</p><p>也有对应的同步的创建方法，只需要在后面加上<code>Sync</code>即可</p><h4 id="spawn方法" tabindex="-1"><a class="header-anchor" href="#spawn方法" aria-hidden="true">#</a> spawn方法</h4><p><code>spawn</code> 方法也是 <code>child_process</code> 模块中的一个方法，用于在新的进程中执行外部命令。<code>spawn</code> 方法会创建一个子进程，并将其与一个外部命令关联起来。在调用 <code>spawn</code> 方法时，可以传递外部命令的名称和参数。<code>spawn</code> 方法的返回值是一个 ChildProcess 对象，该对象可以用于与子进程进行交互。</p><p>该方法启动一个新的进程，并且通过命令行来执行命令。该方法不会缓存子进程的输出，因此适合处理大量数据的情况，例如使用 <code>grep</code> 命令搜索大型文本文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> spawn <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 spawn 方法执行命令</span>
<span class="token keyword">const</span> lsSpawn <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">&#39;ls&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;-lh&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/usr&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

lsSpawn<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">stdout: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

lsSpawn<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">stderr: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

lsSpawn<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">child process exited with code </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>spawn</code> 方法使用一个字符串数组作为参数，其中第一个元素指定要执行的命令，第二个元素是命令行参数数组。然后，它会返回一个 ChildProcess 对象，并使用该对象的 stdout 和 stderr 事件来捕获命令的输出和错误。</p><h4 id="exec方法" tabindex="-1"><a class="header-anchor" href="#exec方法" aria-hidden="true">#</a> exec方法</h4><p>该方法启动一个新的进程，并在shell中执行命令。该方法缓存子进程的输出，并将其作为回调的参数传递。由于在shell中执行命令，因此可以使用一些shell语法，例如管道和重定向。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> exec <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用 exec 方法执行命令</span>
<span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;ls -lh /usr&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">exec error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">stdout: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>stdout<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">stderr: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>stderr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>exec</code> 方法直接使用一个字符串作为命令，其中包括命令和命令行参数。然后，它会返回一个 ChildProcess 对象，并使用该对象的回调函数来捕获命令的输出和错误。</p><h4 id="execfile方法" tabindex="-1"><a class="header-anchor" href="#execfile方法" aria-hidden="true">#</a> execFile方法</h4><p><code>execFile</code> 方法使用一个字符串作为参数，该字符串指定要执行的可执行文件的路径，然后使用一个数组作为参数来传递命令行参数。与 <code>spawn</code> 方法类似，<code>execFile</code> 方法返回一个 ChildProcess 对象，并使用回调函数来捕获命令的输出和错误。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> execFile <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 execFile 方法执行命令</span>
<span class="token function">execFile</span><span class="token punctuation">(</span><span class="token string">&#39;/bin/ls&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;-lh&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/usr&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">execFile error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">stdout: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>stdout<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">stderr: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>stderr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相对于 <code>spawn</code> 方法和 <code>exec</code> 方法，<code>execFile</code> 方法的优势在于可以更好地控制命令的执行，同时也避免了一些安全问题。由于 <code>execFile</code> 方法不会在 shell 中执行命令，因此可以避免一些 shell 注入攻击。此外，由于 <code>execFile</code> 方法仅执行指定的可执行文件，因此可以更好地控制命令的安全性。</p><h4 id="fork方法" tabindex="-1"><a class="header-anchor" href="#fork方法" aria-hidden="true">#</a> fork方法</h4><p>用于创建一个新的子进程，并通过 IPC（进程间通信） 机制实现父子进程之间的通信。</p><p>/src/master.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> childProcess <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> cpuNum <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;os&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cpuNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    childProcess<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token string">&#39;./worker.js&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Master: Hello world.&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>/src/worker.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Worker-&#39;</span> <span class="token operator">+</span> process<span class="token punctuation">.</span>pid <span class="token operator">+</span> <span class="token string">&#39;: Hello world.&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">node</span> index.js
Master: Hello world.
Worker-88268: Hello world.
Worker-88269: Hello world.
Worker-88271: Hello world.
Worker-88272: Hello world.
Worker-88270: Hello world.
Worker-88273: Hello world.
Worker-88274: Hello world.
Worker-88275: Hello world.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="和其它三种方式的区别" tabindex="-1"><a class="header-anchor" href="#和其它三种方式的区别" aria-hidden="true">#</a> 和其它三种方式的区别</h5><ul><li><p><code>spawn</code>、<code>exec</code> 和 <code>execFile</code> 方法都是通过启动一个新的进程来执行指定的命令或脚本，而 <code>fork</code> 方法则是通过复制当前进程并在副本中执行指定的模块来创建子进程。</p></li><li><p>父子进程之间的通信方式不同：<code>spawn</code>、<code>exec</code> 和 <code>execFile</code> 方法可以通过标准输入输出流来与子进程进行通信，而 <code>fork</code> 方法则是通过 IPC 机制来实现父子进程之间的通信。</p></li><li><p>子进程的返回值处理方式不同：<code>spawn</code>、<code>exec</code> 和 <code>execFile</code> 方法都是通过回调函数来处理子进程的返回值和错误信息，而 <code>fork</code> 方法则是通过监听 <code>message</code> 事件来处理子进程的返回值和错误信息。</p></li><li><p><code>fork</code> 方法可以共享父进程的内存空间，从而可以方便地实现父子进程之间的数据共享。这一点与其他三种方法不同，因为其他三种方法创建的子进程都是独立的，无法直接访问父进程的内存空间。</p></li><li><p><code>fork</code> 方法可以在子进程中执行 JavaScript 模块，而不仅仅是执行命令或脚本。这意味着我们可以在子进程中使用 Node.js 提供的所有模块和 API 来实现各种功能，例如网络通信、文件操作、数据库访问等。</p></li><li><p>在使用 <code>fork</code> 方法时，子进程会自动创建一个与父进程相同的 V8 实例，这意味着子进程可以直接访问父进程中已经加载的模块和变量，而不需要重新加载或传递这些信息。这可以提高性能并减少内存消耗。</p></li></ul><h4 id="关闭子进程的方式" tabindex="-1"><a class="header-anchor" href="#关闭子进程的方式" aria-hidden="true">#</a> 关闭子进程的方式</h4><p>一般通过<code>kill</code>方法来杀死一个子进程；</p><p>也可以在子进程中监听 <code>disconnect</code> 事件，当该事件触发时，执行一些清理操作并退出子进程；</p><p>也可以在父进程中监听 <code>exit</code> 事件，在该事件触发时杀死子进程，以确保子进程不会一直运行下去。</p><p>拿<code>kill</code>方法举例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> spawn <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 启动子进程</span>
<span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">&#39;ls&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;-la&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 5秒后杀死子进程</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  child<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token string">&#39;SIGTERM&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>kill</code>方法中可以传入的参数（信号）：</p><ul><li><code>SIGTERM</code>（默认）参数：表示优雅地关闭子进程。何谓优雅？就是等待子进程中的代码执行完成之后再关闭该子进程。信号通知进程需要终止，并且给予进程一定的时间来完成清理工作。这种方式被称为“优雅地终止”，进程可以在收到信号后进行一些清理操作，例如保存进程状态、释放资源等。如果进程在规定的时间内无法完成清理工作，则会被强制终止。使用 <code>SIGTERM</code> 信号可以尽量避免数据丢失和资源泄漏等问题。</li><li><code>SIGKILL</code>参数：信号强制杀死进程，不给予进程任何时间来进行清理工作。使用 <code>SIGKILL</code> 信号可以立即终止进程，但也可能会导致数据丢失和资源泄漏等问题。因此，在正常情况下，应该尽量避免使用 <code>SIGKILL</code> 信号来终止进程。</li></ul><p>在正常情况下，应该优先考虑使用 <code>SIGTERM</code> 信号来终止进程，只有在进程无法响应 <code>SIGTERM</code> 信号时才考虑使用 <code>SIGKILL</code> 信号。</p><h3 id="cluster模块" tabindex="-1"><a class="header-anchor" href="#cluster模块" aria-hidden="true">#</a> cluster模块</h3><p>通过<code>child_process</code>实现单机Node集群的做法，需要处理挺多的细节。Node提供了 <strong>cluster</strong> 模块，该模块提供了更完善的API，除了能够实现多进程充分利用CPU资源以外，还能够帮助我们更好地进行进程管理和处理进程的健壮性问题。</p><p>cluster模块调用fork方法来创建子进程，该方法与child_process中的fork是同一个方法。 cluster模块采用的是经典的主从模型，Cluster会创建一个master，然后根据你指定的数量复制出多个子进程，可以使用 <strong>cluster.isMaster</strong> 属性判断当前进程是master还是worker(工作进程)。由master进程来管理所有的子进程，主进程不负责具体的任务处理，主要工作是负责调度和管理。</p><p>cluster模块使用内置的负载均衡来更好地处理线程之间的压力，该负载均衡使用了Round-robin算法（也被称之为循环算法）。当使用Round-robin调度策略时，master accepts()所有传入的连接请求，然后将相应的TCP请求处理发送给选中的工作进程（该方式仍然通过IPC来进行通信）。</p><blockquote><p><strong>question:</strong> 如果多个Node进程监听同一个端口时会出现 Error:listen EADDRIUNS的错误，而cluster模块为什么可以让多个子进程监听同一个端口呢? <strong>answer:</strong> 原因是master进程内部启动了一个TCP服务器，而真正监听端口的只有这个服务器，当来自前端的请求触发服务器的connection事件后，master会将对应的socket具柄发送给子进程。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> cluster <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cluster&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>cluster<span class="token punctuation">.</span>isMaster<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* master进程 */</span>
    <span class="token keyword">const</span> cpuNum <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;os&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cpuNum<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cluster<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 创建进程完成后输出提示信息</span>
    cluster<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;online&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">worker</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Create worker-&#39;</span> <span class="token operator">+</span> worker<span class="token punctuation">.</span>process<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// 子进程退出后重启</span>
    cluster<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">worker<span class="token punctuation">,</span> code<span class="token punctuation">,</span> signal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;[Master] worker &#39;</span> <span class="token operator">+</span> worker<span class="token punctuation">.</span>process<span class="token punctuation">.</span>pid <span class="token operator">+</span> <span class="token string">&#39; died with code: &#39;</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">&#39;, and signal: &#39;</span> <span class="token operator">+</span> signal<span class="token punctuation">)</span>
        cluster<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">/* worker进程 */</span>
    <span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;net&#39;</span><span class="token punctuation">)</span>
    net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 利用setTimeout模拟处理请求时的操作耗时</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            socket<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;Request handled by worker-&#39;</span> <span class="token operator">+</span> process<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","child_process.html.vue"]]);export{r as default};
