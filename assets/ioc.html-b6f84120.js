import{_ as p,a0 as e,a1 as o,a2 as n,a3 as s,a6 as c,a4 as a,C as i}from"./framework-16947f8e.js";const l={},u=a('<h1 id="ioc" tabindex="-1"><a class="header-anchor" href="#ioc" aria-hidden="true">#</a> IoC</h1><p>之前刷到很多 Java 中关于 IoC 的视频，看着好有意思就想了解一下 JS 中是否有相同的使用场景？</p><p>什么是 IoC：</p><blockquote><p>IoC（Inversion of Control）控制反转或者依赖倒置，是面向对象编程中的一种设计原则，用来降低计算机代码之间的耦合度。</p></blockquote><p>我看 Java 博主对于 IoC 的介绍，初步理解为是 Java 中是以 Class 为基础的，每次使用一个 Class 的时候都需要手动去 new 一个，非常的繁琐，用 IoC 可以很方便的解决这一繁琐的问题。不过这个理解非常的片面，存在一定的问题，IoC 不止解决了这一点点问题。</p><p>后面理解加深了一步，这是一种面向接口的编程思想：在最高层的模块中使用一个指定的方法（相当于定义一个接口），它依赖的模块中创建这个指定的方法（实现接口）。所以按照我现在的理解更希望叫它依赖倒置。</p><blockquote><p>在传统面向对象的编码过程中，当类与类之间存在依赖关系时，通常会直接在类的内部创建依赖对象，这样就导致类与类之间形成了耦合，依赖关系越复杂，耦合程度就会越高，而耦合度高的代码会非常难以进行修改和单元测试。而 IoC 则是专门提供一个容器进行依赖对象的创建和查找，将对依赖对象的控制权由类内部交到容器这里，这样就实现了类与类的解耦，保证所有的类都是可以灵活修改。</p></blockquote><h2 id="加入-ioc-思想" tabindex="-1"><a class="header-anchor" href="#加入-ioc-思想" aria-hidden="true">#</a> 加入 IoC 思想</h2><p>比如要实现一个我之前项目中遇到的重复劳动性很高的问题：</p><ul><li>后台接口用 NestJs 搭建，搭建完后还需要在前端按照它的路由规则得到服务请求的具体地址</li><li>前端还需要根据服务请求地址来编写 ajax 请求</li><li>前端还需要将 ajax 请求进行二次封装</li></ul><p>所以就出现了一个很烦人的问题，写完后台接口，还需要再写前端的请求。于是就想到用脚本的方式自动读取 NestJs 的 Controller 层中的代码来生成前端请求的方法。</p>',11),k={href:"https://www.hiclean.icu/demo/read-apis-nest.html",target:"_blank",rel:"noopener noreferrer"},r=a(`<p>但是会发现这个代码的耦合度非常的高：读取文件数据-替换-生成数据-创建文件，也就是很多功能无法复用，一旦某一个流程需要增加新的逻辑，就很容易出问题，整个代码会显得非常的臃肿。</p><p>虽然现在才这么几行代码，而且能实现功能。但是可以发现，读取文件数据、创建文件等功能适用性应该是很强的，不止应该局限于此。于是后面我又接触到了<code>类</code>的思想：一个类干一件事，比如说可以将这个过程分为两个类：</p><ul><li>文件类，实现文件的读取、创建文件功能</li><li>Api 类，负责数据的替换、生成函数</li></ul><p>File 类：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> fs <span class="token keyword">from</span> <span class="token string">&quot;fs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> FileData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../interface/FileData&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> InitClass <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../interface/InitClass&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createRealPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../utils/realPath&quot;</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 读取文件和创建文件
 * @example
 * new File({
 * 	[生成的文件名]：[文件路径]
 * 	business:&quot;../create-api/business-info.txt&quot;
 * })
 * 可通过注入其它实现init方法的实例对象，完成数据的修改
 */</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token keyword">implements</span> <span class="token class-name">InitClass</span> <span class="token punctuation">{</span>
	<span class="token keyword">static</span> instances<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	files<span class="token operator">:</span> FileData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> instance <span class="token keyword">of</span> File<span class="token punctuation">.</span>instances<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 执行实例中的init方法</span>
				instance<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 初始化</span>
	<span class="token function">init</span><span class="token punctuation">(</span>container<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		container<span class="token punctuation">.</span>file <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 向依赖关系Map中注入实例</span>
	<span class="token keyword">static</span> inject<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
		instance<span class="token operator">:</span> InstanceType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
	<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		File<span class="token punctuation">.</span>instances<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 添加文件</span>
	<span class="token keyword">private</span> <span class="token function">add</span><span class="token punctuation">(</span>options<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> fileName <span class="token keyword">in</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> withRealPath <span class="token operator">=</span> <span class="token function">createRealPath</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
				<span class="token punctuation">{</span>
					fileName<span class="token operator">:</span> fileName<span class="token punctuation">,</span>
					filePath<span class="token operator">:</span> options<span class="token punctuation">[</span>fileName<span class="token punctuation">]</span><span class="token punctuation">,</span>
					fileData<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>withRealPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 获取文件数据</span>
	<span class="token keyword">async</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> file <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>
				path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>filePath<span class="token punctuation">)</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">const</span> text <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			file<span class="token punctuation">.</span>fileData <span class="token operator">=</span> text<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//将files数组对象中的数据转换成文件</span>
	<span class="token function">run</span><span class="token punctuation">(</span>files<span class="token operator">:</span> FileData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> file <span class="token keyword">of</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>realPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 获取目录路径和文件名</span>
				<span class="token keyword">const</span> dirPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>
					path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>realPath<span class="token punctuation">)</span>
				<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;create folder :&quot;</span><span class="token punctuation">,</span> dirPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">const</span> fileName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

				<span class="token comment">// 使用递归创建目录</span>
				<span class="token keyword">function</span> <span class="token function">createDirectory</span><span class="token punctuation">(</span>dirPath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>dirPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						<span class="token function">createDirectory</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>dirPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>dirPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>

				<span class="token comment">// 创建多层目录</span>
				<span class="token function">createDirectory</span><span class="token punctuation">(</span>dirPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

				<span class="token comment">// 创建文件</span>
				fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>realPath<span class="token punctuation">,</span> file<span class="token punctuation">.</span>fileData<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;create file :&quot;</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>children<span class="token operator">?.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 删除文件夹下的所有文件</span>
	<span class="token function">deleteFile</span><span class="token punctuation">(</span>filePath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
			files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				<span class="token keyword">let</span> curPath <span class="token operator">=</span> filePath <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>curPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deleteFile</span><span class="token punctuation">(</span>curPath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//递归删除文件夹</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
					fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span>curPath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除文件</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			fs<span class="token punctuation">.</span><span class="token function">rmdirSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ServiceApi 类：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getApiTemp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../template/api&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> matchPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../utils/matchPath&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">EOL</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;os&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> File <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./File&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> InitClass <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../interface/InitClass&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ServiceApi</span> <span class="token keyword">implements</span> <span class="token class-name">InitClass</span> <span class="token punctuation">{</span>
	originData<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">static</span> instances<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token function">init</span><span class="token punctuation">(</span>context<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> file <span class="token keyword">of</span> context<span class="token punctuation">.</span>files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			file<span class="token punctuation">.</span>fileData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">serviceToFunc</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>fileData<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">/**
	 * 将NestJS Controller层的路由转换成对应JS的请求方法
	 * @example
	 * \`@Controller(&#39;business-info&#39;);
	 *  export class BusinessInfoController {
	 *     &quot;@Get(&#39;/createTemp&#39;)&quot;
	 *      getCreateTemp(){}
	 * }\`
	 * ==&gt;
	 *function createTemp(params){
	 *    return post(&#39;business-info/createTemp&#39;,params)
	 *}
	 * */</span>
	<span class="token function">serviceToFunc</span><span class="token punctuation">(</span>originData<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> fileData<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
		<span class="token comment">// 根路径</span>
		<span class="token keyword">const</span> rootPath <span class="token operator">=</span> <span class="token function">matchPath</span><span class="token punctuation">(</span>originData<span class="token punctuation">,</span> <span class="token string">&quot;Controller&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
		<span class="token comment">// 子路径</span>
		<span class="token keyword">const</span> childPath <span class="token operator">=</span> <span class="token function">matchPath</span><span class="token punctuation">(</span>originData<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;Post&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Get&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> cPath <span class="token keyword">of</span> childPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> apiName <span class="token operator">=</span> cPath<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> cPath<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">getApiTemp</span><span class="token punctuation">(</span>apiName<span class="token punctuation">,</span> rootPath<span class="token punctuation">,</span> cPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
			fileData <span class="token operator">+=</span> api <span class="token operator">+</span> <span class="token constant">EOL</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> fileData<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Route 类：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> InitClass <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../interface/InitClass&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> template_route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../template/route&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> FileData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../interface/FileData&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createRealPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../utils/realPath&quot;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 创建对象路径
 * @example
 * home: &quot;@/pages/home&quot; =&gt;
 * -home
 * --home.js
 *
 * 想要包含多个文件，则使用对象形式
 * @example
 * {
 * 	bar: {
 *		bar1: &quot;@/pages/bar/bar1&quot;,
 *		bar2: &quot;@/pages/bar/bar2&quot;,
 *	}
 *}
 * =&gt;
 * result
 * -bar
 * --bar1.js
 * --bar2.js
 *  */</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Route</span> <span class="token keyword">implements</span> <span class="token class-name">InitClass</span> <span class="token punctuation">{</span>
	files <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span>files<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>files <span class="token operator">=</span> files<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">init</span><span class="token punctuation">(</span>context<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createRoute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> real <span class="token operator">=</span> <span class="token function">createRealPath</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">;</span>
		context<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>real<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token function">createRoute</span><span class="token punctuation">(</span>files<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> res<span class="token operator">:</span> FileData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> fileName <span class="token keyword">in</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 结果数据</span>
			<span class="token keyword">let</span> route_data <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

			<span class="token comment">// 数据替换,不用读取文件</span>
			route_data <span class="token operator">=</span> <span class="token function">template_route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\{\\{name\\}\\}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\{\\{path\\}\\}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> files<span class="token punctuation">[</span>fileName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">// 当前文件的属性</span>
			<span class="token keyword">let</span> file_data <span class="token operator">=</span> <span class="token punctuation">{</span>
				fileName<span class="token operator">:</span> fileName<span class="token punctuation">,</span>
				fileData<span class="token operator">:</span> route_data <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
				filePath<span class="token operator">:</span> files<span class="token punctuation">[</span>fileName<span class="token punctuation">]</span><span class="token punctuation">,</span>
				children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">;</span>

			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> files<span class="token punctuation">[</span>fileName<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">let</span> newChild <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createRoute</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span>fileName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// @ts-ignore</span>
				file_data<span class="token punctuation">[</span><span class="token string">&quot;children&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>newChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
				res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>file_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>file_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> res<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>


<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义一个容器：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../decorator/inject&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ServiceApi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./ServiceApi&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> File <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./File&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./Route&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token punctuation">{</span>
	<span class="token keyword">static</span> instances<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> instance <span class="token keyword">of</span> Container<span class="token punctuation">.</span>instances<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 执行实例中的init方法</span>
			instance<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 向依赖关系Map中注入实例</span>
	<span class="token keyword">static</span> inject<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">new</span></span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
		instance<span class="token operator">:</span> InstanceType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
	<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		Container<span class="token punctuation">.</span>instances<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 注入Api类实例，用于处理文件读取后的源文件数据，需要在Container前注入</span>
File<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServiceApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
File<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>
	<span class="token keyword">new</span> <span class="token class-name">Route</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
		home<span class="token operator">:</span> <span class="token string">&quot;@/pages/home&quot;</span><span class="token punctuation">,</span>
		bar<span class="token operator">:</span> <span class="token punctuation">{</span>
			bar1<span class="token operator">:</span> <span class="token string">&quot;@/pages/bar/bar1&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 注入文件类实例，用于添加一个流程所有必备文件</span>
Container<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>
	<span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
		business<span class="token operator">:</span> <span class="token string">&quot;../create-api/business-info.txt&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 实例化一个新的流程</span>
<span class="token keyword">let</span> lc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这三段代码中：</p><ul><li>三个模块互不相关，模块与模块之间没有很强的关联</li><li>通过注入实例、在高层次模块中实现 init 方法来实现模块之间的关联</li></ul><p>大大的降低了耦合度。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p><strong>2.21更新：</strong></p><p>看似挺容易的代码，但是写起来花了挺多时间的，整整花了两天....QaQ</p><p>也是深深的怀疑自己的能力，其中用到了一个递归的方法来创建文件夹。之前也是想到了用递归的，主要的思路就是这个，但是具体的实现过程中出现了差错。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRealPath</span><span class="token punctuation">(</span>files<span class="token operator">:</span> FileData<span class="token punctuation">,</span> basePath <span class="token operator">=</span> <span class="token string">&quot;./result&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>files<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token comment">// 判断files中是否有数据</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>files<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 有则取出最后一个</span>
		<span class="token keyword">let</span> file <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token comment">// 拼接路径</span>
		<span class="token keyword">let</span> filePath <span class="token operator">=</span> basePath <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span>fileName<span class="token punctuation">;</span>
		<span class="token comment">// 如果当前目录存在子目录，递归调用</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>children<span class="token operator">?.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			file<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">createRealPath</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>children<span class="token punctuation">,</span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 没有子目录则生成文件</span>
			file<span class="token punctuation">.</span>realPath <span class="token operator">=</span> filePath <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span>fileName <span class="token operator">+</span> <span class="token string">&quot;.js&quot;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 存放结果</span>
		res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体的代码如上，主要是一个文件路径的递归创建。</p><p>后面了解到了一些新的<code>fs</code>相关api,支持node10版本以上：</p><ul><li>fs.dirname 返回当前文件所在的目录路径（上级目录？）</li><li>fs.basename 给一个路径，返回最内层的文件名</li><li>fs.parse 给定一个路径，将这个路径解析成一个对象</li><li>fs.format 给一个对象，将这个对象解析成一个路径</li></ul><p>似乎用<code>parse/format</code>来解决路径问题会方便一点。</p><p>还是要提醒自己，每次打代码之前先想一个思路吧，不要迷迷糊糊的就去硬写，浪费好多的时间。</p>`,24);function d(v,m){const t=i("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[s("具体例子已经实现过了，"),n("a",k,[s("在这里"),c(t)])]),r])}const f=p(l,[["render",d],["__file","ioc.html.vue"]]);export{f as default};
