import{_ as s,a0 as n,a1 as a,a4 as e}from"./framework-786d5328.js";const p={},t=e(`<h1 id="css-属性计算过程" tabindex="-1"><a class="header-anchor" href="#css-属性计算过程" aria-hidden="true">#</a> CSS 属性计算过程</h1><p>CSS 属性的计算过程分为四个步骤</p><p>1.确定声明值</p><p>2.解决层叠冲突</p><p>3.使用继承</p><p>4.使用默认值</p><h2 id="确定声明值" tabindex="-1"><a class="header-anchor" href="#确定声明值" aria-hidden="true">#</a> 确定声明值</h2><p>确认声明值就是我们开发者写下的 CSS 样式，比如说：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">p</span> <span class="token punctuation">{</span>
	<span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么此时，我们就知道了声明值就是这个<code>color:red</code>了。</p><p>但是如果存在样式规则的冲突该怎么办呢？在开发的过程中肯定会存在这个问题的，有可能不是当前的属性值影响到了最终的样式效果，而是在其它地方对其属性的修改产生了效果。</p><p>所以存在一个<code>层叠冲突</code>的问题。</p><h2 id="解决层叠冲突" tabindex="-1"><a class="header-anchor" href="#解决层叠冲突" aria-hidden="true">#</a> 解决层叠冲突</h2><p>解决层叠冲突的流程一般经历三个：</p><ul><li><p>比较源的重要性</p></li><li><p>比较优先级</p></li><li><p>比较次序</p></li></ul><h3 id="比较源的重要性" tabindex="-1"><a class="header-anchor" href="#比较源的重要性" aria-hidden="true">#</a> 比较源的重要性</h3><p>在此之间，需要知道存在三种样式表：</p><ul><li><p>作者样式表 可以理解为开发人员写的样式</p></li><li><p>用户样式表 用户在浏览器中设置中导入的样式。是由用户自定义的样式表，用来覆盖网页的默认样式或作者样式。用户可以根据自己的喜好和需求，修改网页的字体、颜色、大小、背景等样式，以达到更好的阅读和使用体验。</p></li><li><p>用户代理样式表 浏览器默认样式。是由浏览器厂商提供的默认样式表，用来定义 HTML 元素的默认样式，比如字体、颜色、大小等。不同的浏览器厂商可能会提供不同的默认样式，但大多数情况下，它们都是类似的。</p></li></ul><p>他们三者的影响效果：作者样式表&gt;用户样式表&gt;用户代理样式表。按照此规则来确认使用哪种样式效果。</p><p>如果在同一个源中存在样式声明冲突怎么办？接下来就需要比较优先级了。</p><h3 id="比较优先级" tabindex="-1"><a class="header-anchor" href="#比较优先级" aria-hidden="true">#</a> 比较优先级</h3><p>在下面这一段 css 代码中，源的重要性是相同的，都是属于作者样式。但是这两段代码存在规则冲突的问题，就需要比较它们选择器的优先级了。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.test h1</span> <span class="token punctuation">{</span>
	<span class="token property">font-size</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">h1</span> <span class="token punctuation">{</span>
	<span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="选择器的优先级" tabindex="-1"><a class="header-anchor" href="#选择器的优先级" aria-hidden="true">#</a> 选择器的优先级</h4><blockquote><p>优先级就是分配给指定的 CSS 声明的一个权重，它由 匹配的选择器中的 每一种选择器类型的 数值 决定。</p></blockquote><blockquote><p>而当优先级与多个 CSS 声明中任意一个声明的优先级相等的时候，CSS 中最后的那个声明将会被应用到元素上。</p></blockquote><blockquote><p>当同一个元素有多个声明的时候，优先级才会有意义。因为每一个直接作用于元素的 CSS 规则总是会接管/覆盖（take over）该元素从祖先元素继承而来的规则。</p></blockquote><p>下面列出的选择器权重是递增的：</p><p>1.类型选择器（如,<code>h1</code>）和伪元素（如,<code>::before</code>）</p><p>2.类选择器（如，<code>.class1</code>）、属性选择器（如，<code>[type=&quot;xxx&quot;]</code>）、伪类（如，<code>:hover</code>）</p><p>3.ID 选择器（如，<code>#id</code>）</p><p>还存在两种特殊的情况：</p><ul><li><p>行内样式：<code>style</code>的优先级会大于上面说的三种</p></li><li><p>规则中加上了<code>!important</code>的会大于所有权重</p></li></ul><p>回到一开始的代码，类选择器的优先级大于属性选择的优先级，所以<code>font-size: 50px;</code>为确认的样式。</p><h3 id="比较顺序" tabindex="-1"><a class="header-anchor" href="#比较顺序" aria-hidden="true">#</a> 比较顺序</h3><p>一般来说经历上面两个步骤就能确定样式规则，但是存在源相同、选择器的优先级相同的情况。</p><p>此时只需要比较出现的顺序就行了，后面出现的规则会覆盖前面出现的规则。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">h1</span> <span class="token punctuation">{</span>
	<span class="token property">font-size</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">h1</span> <span class="token punctuation">{</span>
	<span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时的<code>font-size: 20px;</code>覆盖前面的<code>font-size: 50px;</code>，最终确定为<code>20px</code></p><h2 id="使用继承" tabindex="-1"><a class="header-anchor" href="#使用继承" aria-hidden="true">#</a> 使用继承</h2><p>解决完层叠冲突后，如果遇到没有声明的属性，那么就会使用默认值了吗？</p><p>在使用默认值之前，还会判断父元素中是否有相关的声明，如果有，则将该声明继承过来。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
	<span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit amet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，针对 div 设置了 color 属性值为红色，而针对 p 元素我们没有声明任何的属性，但是由于 color 是可以继承的，因此 p 元素从最近的 div 身上继承到了 color 属性的值。</p><p>需要注意的是，继承的是最近的父元素。</p><p>对于哪些样式可以继承，就需要在使用的时候看文档了。</p><h2 id="使用默认值" tabindex="-1"><a class="header-anchor" href="#使用默认值" aria-hidden="true">#</a> 使用默认值</h2><p>最后，如果属性不能通过继承得来，就只能使用浏览器默认的样式了。</p><p>一个 HTML 元素要在浏览器中渲染出来，必须具备所有的 CSS 属性值，但是绝大部分我们是不会去设置的，用户代理样式表里面也不会去设置，也无法从继承拿到，因此最终都是用默认值。</p>`,50),c=[t];function i(o,l){return n(),a("div",null,c)}const r=s(p,[["render",i],["__file","property-computed.html.vue"]]);export{r as default};
