import{_ as n,a0 as i,a1 as s,a2 as r,a3 as e,a5 as c,a6 as o,a4 as a,C as l}from"./framework-786d5328.js";const d={},h=a('<h1 id="接口重放攻击" tabindex="-1"><a class="header-anchor" href="#接口重放攻击" aria-hidden="true">#</a> 接口重放攻击</h1><h1 id="什么是接口重放" tabindex="-1"><a class="header-anchor" href="#什么是接口重放" aria-hidden="true">#</a> 什么是接口重放</h1><blockquote><p>重放攻击(Replay Attacks)又称重播攻击、回放攻击，是指攻击者发送一个目的主机已接收过的包，来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的正确性。 重放攻击可以由发起者，也可以由拦截并重发该数据的敌方进行。攻击者利用网络监听或者其他方式盗取认证凭据，之后再把它重新发给认证服务器。 重放攻击在任何网络通信过程中都可能发生，是计算机世界黑客常用的攻击方式之一。</p></blockquote><h1 id="复现" tabindex="-1"><a class="header-anchor" href="#复现" aria-hidden="true">#</a> 复现</h1><p>具体思路：</p><ul><li>通过抓包工具（Charles）获取到请求后台的接口信息</li><li>修改请求的接口参数</li><li>完成接口重放攻击</li></ul>',6),p=a('<h1 id="防止接口重放" tabindex="-1"><a class="header-anchor" href="#防止接口重放" aria-hidden="true">#</a> 防止接口重放</h1><h2 id="timestamps" tabindex="-1"><a class="header-anchor" href="#timestamps" aria-hidden="true">#</a> timestamps</h2><p>timestamp 用来表示请求的当前时间戳，这个时间戳当然要和服务器时间戳进行校正过的。我们预期正常请求带的 timestamp 参数会是不同的（预期是正常的人每秒至多只会做一个操作）。每个请求带的时间戳不能和当前时间超过一定规定的时间。比如 60s。这样，这个请求即使被截取了，你也只能在 60s 内进行重放攻击。过期失效。</p><h2 id="nonce" tabindex="-1"><a class="header-anchor" href="#nonce" aria-hidden="true">#</a> nonce</h2><p>Nonce是Number once的缩写</p><p>是由客户端根据足够随机的情况生成的，比如 md5 (timestamp+rand (0, 1000)); 它就有一个要求，正常情况下，在短时间内（比如 60s）连续生成两个相同 nonce 的情况几乎为 0。</p><p>服务端第一次在接收到这个 nonce 的时候做下面行为：</p><ul><li>去 redis 中查找是否有 key 为 nonce:{nonce} 的 string</li><li>如果没有，则创建这个 key，把这个 key 失效的时间和验证 timestamp 失效的时间一致，比如是 60s。</li><li>如果有，说明这个 key 在 60s 内已经被使用了，那么这个请求就可以判断为重放请求。</li></ul><p>Nonce是一个在加密通信只能使用一次的数字。在认证协议中，它往往是一个随机或伪随机数，以避免重放攻击。Nonce也用于流密码以确保安全。如果需要使用相同的密钥加密一个以上的消息，就需要Nonce来确保不同的消息与该密钥加密的密钥流不同。</p><h2 id="timestamps-nonce" tabindex="-1"><a class="header-anchor" href="#timestamps-nonce" aria-hidden="true">#</a> timestamps+nonce</h2><p>服务端接到这个请求：</p><ul><li>先验证 sign 签名是否合理，证明请求参数没有被中途篡改</li><li>再验证 timestamp 是否过期，证明请求是在最近 60s 被发出的</li><li>最后验证 nonce 是否已经有了，证明这个请求不是 60s 内的重放请求</li></ul>',12);function m(u,_){const t=l("RouterLink");return i(),s("div",null,[h,r("p",null,[e("点击"),c(t,{to:"/demo/replay-attact-demo.html"},{default:o(()=>[e("这里")]),_:1}),e("查看具体代码示例")]),p])}const k=n(d,[["render",m],["__file","replay-attack.html.vue"]]);export{k as default};
