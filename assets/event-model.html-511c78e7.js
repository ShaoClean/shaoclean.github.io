import{_ as e,a0 as t,a1 as p,a2 as i,a3 as n,a6 as c,a7 as o,a4 as a,C as l}from"./framework-16947f8e.js";const u={},d=a(`<h1 id="事件模型" tabindex="-1"><a class="header-anchor" href="#事件模型" aria-hidden="true">#</a> 事件模型</h1><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h2><p>在说事件模型之前先需要了解什么是事件，事件可以理解为在浏览器或者 HTML 中发生的一种交互操作，使得网页具备互动性，最常见的就是点击事件、键盘事件等。</p><h2 id="事件流" tabindex="-1"><a class="header-anchor" href="#事件流" aria-hidden="true">#</a> 事件流</h2><p>我们知道多层嵌套的 DOM 是一个树形结构。那么在一个多层嵌套的 DOM 结构中，给最里面的一个 DOM 元素绑定了一个事件，此时最外层的元素也有一个事件。如果点击了最里面的一个元素，那么该如何确定这个事件的执行顺序？怎么就可以确定我想点击的是整个元素而不是内部的元素呢？</p><p>所以就涉及到了事件的执行顺序问题，从而引出事件流的概念。</p><p>事件流都会经历三个阶段：</p><ul><li>事件捕获阶段 事件捕获与事件冒泡相反，事件最开始由不太具体的节点最早接受事件, 而最具体的节点（触发节点）最后接受事件</li><li>事件执行阶段</li><li>事件冒泡阶段 事件冒泡是一种从下往上的传播方式，由最具体的元素（触发节点）然后逐渐向上传播到最不具体的那个节点，也就是 DOM 中最高层的父节点</li></ul><h2 id="事件模型-1" tabindex="-1"><a class="header-anchor" href="#事件模型-1" aria-hidden="true">#</a> 事件模型</h2><p>事件模型可以分为三种：</p><ul><li>原始事件模型（DOM0 级）</li><li>标准事件模型（DOM2 级）</li><li>IE 事件模型</li></ul><h3 id="原始事件模型" tabindex="-1"><a class="header-anchor" href="#原始事件模型" aria-hidden="true">#</a> 原始事件模型</h3><p>绑定方式有两种：</p><p>1.直接在元素上绑定事件</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.添加元素的 onXXX 属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;.btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> fun<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">小结</p><p>原始事件模型特性：</p><ul><li><p>绑定速度快</p><blockquote><p>DOM0 级事件具有很好的跨浏览器优势，会以最快的速度绑定，但由于绑定速度太快，可能页面还未完全加载出来，以至于事件可能无法正常运行</p></blockquote></li><li><p>只支持事件冒泡阶段</p></li><li><p>存在事件覆盖现象 当希望为同一个元素绑定多个同类型事件的时候；如绑定方式 1，再以绑定方式二的形式给 input 绑定事件，绑定方式 2 会覆盖绑定方式 1 中的事件</p></li></ul></div><h3 id="标准事件模型" tabindex="-1"><a class="header-anchor" href="#标准事件模型" aria-hidden="true">#</a> 标准事件模型</h3><p>标准事件模型可以理解为用<code>addEventListener</code>绑定的事件，它遵循事件流的三个过程，</p><ul><li>事件捕获阶段：事件从 document 一直向下传播到目标元素, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行</li><li>事件处理阶段：事件到达目标元素, 触发目标元素的监听函数</li><li>事件冒泡阶段：事件从目标元素冒泡到 document, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行</li></ul><p>可以用<code>addEventListener</code>绑定事件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> useCapture<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以用<code>removeEventListener</code>解除绑定的事件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">removeEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> useCapture<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;.btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> showMessage<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> showMessage<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">小结</p><p>标准事件模型特性：</p><ul><li><p>可以绑定多个相同的事件，并且不会冲突</p></li><li><p>自定义执行阶段 当第三个参数(useCapture)设置为 true 就在捕获过程中执行，反之在冒泡过程中执行处理函数</p></li><li><p>存在事件覆盖现象</p></li></ul></div><h3 id="ie-事件模型" tabindex="-1"><a class="header-anchor" href="#ie-事件模型" aria-hidden="true">#</a> IE 事件模型</h3><p>IE 事件模型有两个执行阶段：</p><ul><li>事件处理阶段</li><li>事件冒泡阶段</li></ul><p>事件绑定监听函数的方式如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">attachEvent</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>事件移除监听函数的方式如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">detachEvent</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;.btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&quot;onclick&quot;</span><span class="token punctuation">,</span> showMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">&quot;onclick&quot;</span><span class="token punctuation">,</span> showMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件级别" tabindex="-1"><a class="header-anchor" href="#事件级别" aria-hidden="true">#</a> 事件级别</h2><p>可以分为 DOM0、DOM1、DOM2 级别的事件</p><h3 id="dom0-级" tabindex="-1"><a class="header-anchor" href="#dom0-级" aria-hidden="true">#</a> DOM0 级</h3><p>DOM0 级具有很好的跨浏览器优势，会以最快的速度绑定。 无论用 html 还是 js，都是把一个函数赋值给文档元素，在事件监听函数被调用时候它是作为产生事件的元素的放法调用的，所以 this 引用的是那个目标元素</p><h3 id="dom1-级" tabindex="-1"><a class="header-anchor" href="#dom1-级" aria-hidden="true">#</a> DOM1 级</h3><p>其实就是 DOM0 的规范版本，官方解释就是： DOM1 级规范成为 W3C 的推荐标准，为基本的文档结构及查询提供了接口。 DOM1 一般只有设计规范没有具体实现，所以一般跳过。</p><h3 id="dom2-级" tabindex="-1"><a class="header-anchor" href="#dom2-级" aria-hidden="true">#</a> DOM2 级</h3>`,44),r=a('<p>可以简单的理解为通过<code>addEventListener</code>、<code>attachEvent</code>添加的事件</p><h3 id="dom3-级" tabindex="-1"><a class="header-anchor" href="#dom3-级" aria-hidden="true">#</a> DOM3 级</h3><p>也就是 DOM2 的扩展版本,对 DOM2 增加了内容模型和文档验证 举例：</p><ul><li><p>UI 事件 load、scroll</p></li><li><p>焦点事件 blur、focus</p></li><li><p>鼠标事件 dbclick、mouseup</p></li><li><p>滚轮事件 mousewheel</p></li><li><p>文本事件 textInput</p></li><li><p>键盘事件 keydown、keypress</p></li><li><p>合成事件 compositionstart</p></li><li><p>变动事件 DOMsubtreeModified</p></li></ul>',4);function k(h,v){const s=l("sapn");return t(),p("div",null,[d,i("p",null,[n("在 2 级 DOM 中除了定义了一些 DOM 相关的操作之外还定义了一个**"),c(s,{style:{color:"red"}},{default:o(()=>[n("事件模型")]),_:1}),n("** ，这个标准下的事件模型就是我们所说的 2 级 DOM 事件模型")]),r])}const b=e(u,[["render",k],["__file","event-model.html.vue"]]);export{b as default};
