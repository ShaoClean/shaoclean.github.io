import{_ as n,a0 as s,a1 as a,a4 as t}from"./framework-786d5328.js";const p={},e=t(`<h1 id="react的批处理" tabindex="-1"><a class="header-anchor" href="#react的批处理" aria-hidden="true">#</a> React的批处理</h1><p>所谓的批处理，就是将多个render（渲染）合并成一次渲染。这样做的好处就是减少不必要的开销，带来更好的性能体验。</p><p>下面这个例子，点击一次按钮，只会重新渲染一次。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">DeferValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
	<span class="token keyword">const</span> <span class="token punctuation">[</span>query<span class="token punctuation">,</span> setQuery<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
	  
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Component Render&#39;</span><span class="token punctuation">)</span>  
	
	<span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  
		<span class="token function">setQuery</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
		<span class="token function">setQuery</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
		<span class="token function">setQuery</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
	<span class="token punctuation">}</span><span class="token punctuation">;</span>  
	  
	<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;query 变化了&#39;</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span>  
	<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span>query<span class="token punctuation">]</span><span class="token punctuation">)</span>  
	  
	
	<span class="token keyword">return</span> <span class="token punctuation">(</span>  
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  
			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>number<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>query<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
		</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  
	<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&#39;Component Render&#39;</code>只会在控制台输出两次，<code>&#39;query 变化了&#39;</code>也输出两次： - 第一次是组件首次挂载到页面中时 - 第二次是点击按钮时</p><p>在点击按钮时触发了<code>handleClick</code>事件，这个事件中执行了三次<code>setQuery</code>，但最终呈现在页面上的值是3。</p><p>这很好的诠释了react的批处理。并不因为执行了三次<code>setQuery</code>而重新渲染三次，而是将这三次合并成一次渲染。</p><p><strong>之前一直有一个误区，那就是以为三个<code>setQuery</code>只会执行最后一个，前面两个被忽略掉。实际上不会的</strong></p><p>只要写成下面这种形式，就可以很轻易的看出来了：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>
<span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  
	<span class="token function">setQuery</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">preValue</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> preValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
	<span class="token function">setQuery</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">preValue</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> preValue <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
	<span class="token function">setQuery</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">preValue</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> preValue <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终展示在页面上的值是6，可见这三个<code>setQuery</code>都被执行，而不是我之前认为的<code>忽略</code>掉前面两个</p>`,11),c=[e];function o(u,l){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","批处理.html.vue"]]);export{k as default};
