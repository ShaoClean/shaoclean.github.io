import{_ as n,a0 as s,a1 as a,a4 as e}from"./framework-786d5328.js";const p={},t=e(`<h1 id="javase" tabindex="-1"><a class="header-anchor" href="#javase" aria-hidden="true">#</a> JavaSE</h1><h1 id="一、什么是jdk、jvm、jre" tabindex="-1"><a class="header-anchor" href="#一、什么是jdk、jvm、jre" aria-hidden="true">#</a> 一、什么是JDK、JVM、JRE</h1><h2 id="jdk" tabindex="-1"><a class="header-anchor" href="#jdk" aria-hidden="true">#</a> JDK</h2><p>JDK：Java Development Kit （Java开发工具包）</p><p>JDK= JRE + 开发工具集（java，javac，javadoc，javap）</p><p>JDK是提供给java开发人员使用的，其中包含了java的开发工具，也包括了JRE，所有安装了JDK，就不用在单独安装JRE了</p><h2 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm" aria-hidden="true">#</a> JVM</h2><p>JVM：java virtual macchine</p><p>JVM是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器，它包含在JDK中，java虚拟机机制跑步了底层运行平台的差别，实现一次编译，到处运行。</p><h2 id="jre" tabindex="-1"><a class="header-anchor" href="#jre" aria-hidden="true">#</a> JRE</h2><p>JRE：Java Runtime Environment（Java运行环境）</p><p>JRE=JVM + Java的核心类库【类】（Java SE标准类库）</p><p>如果想要运行一个开发好的Java程序，计算机中只需要有JRE就能运行</p><h1 id="二、转义字符" tabindex="-1"><a class="header-anchor" href="#二、转义字符" aria-hidden="true">#</a> 二、转义字符</h1><p><code>\\t</code>:一个制表单位，实现对齐的功能</p><p><code>\\n</code>:换行符</p><p><code>\\\\</code>:一个\\</p><p><code>\\&quot;</code>:一个&quot;</p><p><code>\\&#39;</code>:一个&#39;</p><p><code>\\r</code>:一个回车</p><h1 id="三、注释" tabindex="-1"><a class="header-anchor" href="#三、注释" aria-hidden="true">#</a> 三、注释</h1><p>单行注释： <code>//我是单行注释</code></p><p>多行注释：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
我是多行注释
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文档注释：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
	*@author xxx
	*@version x.x.x
	*@deprecated 指一个过期的类或成员
	*@docRoot 当前文档根目录的路径
	*@exception 表示一个类抛出的异常
	*@inheritDoc 从直接父类继承的注释
	*@link 插入一个到另一个主题的链接，
	*@linkplain 插入一个到另一个主题的链接，但是该链接显示纯文本字体
	*@param 说明一个方法的参数
	*@return 说明返回值类型
	*@see 指定一个到另一个主题的链接
	*@serial 说明一个序列化属性
	*@serialData 说明通过writeObject（）和writeExternal（）方法写的数据
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成文档指令：<code>javadoc -d 文件夹名称 -xx -yy java文件名称</code></p><h1 id="四、路径" tabindex="-1"><a class="header-anchor" href="#四、路径" aria-hidden="true">#</a> 四、路径</h1><p>相对路径：从当前目录开始定位，形成的一个路径</p><p>绝对路径：从顶级路径开始定位，形成的一个路径</p><h1 id="五、数据类型" tabindex="-1"><a class="header-anchor" href="#五、数据类型" aria-hidden="true">#</a> 五、数据类型</h1><p>变量表示内存中的一个存储区域</p><h2 id="_1-基本数据类型" tabindex="-1"><a class="header-anchor" href="#_1-基本数据类型" aria-hidden="true">#</a> 1.基本数据类型</h2><p>数值型：整数类型、浮点（小数）类型</p><p>字符型：char</p><p>布尔型：boolean</p><p><strong>整数</strong>：</p><p><code>byte</code>:1字节，-128(-2的7次方) ～ 127(2的7次方-1)</p><p><code>short</code>:2字节，-32768(-2的15次方) ～ 32767 (2的15次方-1)</p><p><code>int</code>:4字节,-2147483648 (-2的31次方) ～ 2147483647 (2的31次方-1)</p><p><code>long</code>:8字节,-9223372036854775808 (-2的63次方) ～ 9223372036854775807 (2的63次方-1)</p><p>⚠️注意：Java的整型常量（具体值，如2，33）默认为int类型，声明long型常量需要在后面加上<code>l</code>或者<code>L</code></p><p><strong>浮点（小数）类型：</strong></p><p><code>float</code>:4字节,1.4E-45 (2的-149次方) ~ 3.4028235E38 (2的128次方-1)</p><p><code>double</code>:8字节,4.9E-324 (2的-1074次方) ~ 1.7976931348623157E308 (2的1024次方-1)</p><p>⚠️注意：Java的浮点型常量（具体值，如2.2，33.3）默认为double类型，声明float型常量需要在后面加上<code>f</code>或者<code>F</code>。</p><p>当我们对运算结果是小数的进行相等判断时，要小心（应该是以两个数的差值的绝对值，在某个精度范围内）</p><p><strong>字符类型：</strong></p><p><code>char</code>:2字节</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">&#39;邵&#39;</span><span class="token punctuation">;</span><span class="token comment">//不能用双引号，双引号表示字符串类型</span>
<span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span><span class="token comment">//字符类型可以直接存放一个数字</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当输出c4时候，会输出97表示的字符 =》编码的概念</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⚠️注意：</p><ul><li>字符常量是用单引号<code>&#39;&#39;</code>括起来的单个字符。例如：<code>char c1 = &#39;邵&#39;;char c2 = &#39;a&#39;;char c3 = &#39;9&#39;;</code>但是不能用双引号<code>&quot;&quot;</code>，双引号表示字符串类型。</li><li>允许使用转义字符<code>\\</code>来将其后的字符转变为特殊字符型常量。例如：<code>char c3= &#39;\\n&#39;</code></li><li>char的本质是一个整数，在输出时，是unicode码对应的字符</li><li>可以给char类型的变量直接存放一个整数，然后输出时，会按照对应的unicode字符输出</li><li>char类型时可以进行运算，相当于一个整数，因为它都对应有unicode码</li></ul><p>字符类型本质探讨：</p><ul><li>字符型存储到计算机中，需要将字符对应的码值（整数）找出来</li><li>字符和码值的对应关系是通过字符编码表决定的 <ul><li>ASCII（ASCII编码表用一个字节表示，一共128个字符，实际上一个字节可以表示256个字符，只用128个）</li><li>Unicode（Unicode编码表，固定大小的编码，使用两个字节来表示字符，字母和汉字统一都是占用两个字节，这样浪费空间）</li><li>utf-8（大小可变的编码，字母使用1个字节，汉字使用3个字节）</li><li>GBK（可以表示汉字，而且范围广，字母使用1个字符，汉字2个字节，可以表示的汉字数量少）</li><li>gb2312（可以表示汉字，gb2312&lt;gbk）</li><li>big5码（繁体中文，台湾，香港）</li></ul></li></ul><p><strong>布尔类型：</strong></p><p><code>boolean</code>:1字节</p><h3 id="基本数据类型转换" tabindex="-1"><a class="header-anchor" href="#基本数据类型转换" aria-hidden="true">#</a> 基本数据类型转换：</h3><p>自动提升原则：当java程序进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型，这就是自动类型转换。</p><p>char=&gt;int=&gt;long=&gt;float=&gt;double</p><p>byte=&gt;short=&gt;int=&gt;long=&gt;float=&gt;double</p><p>注意：</p><ul><li><p>有多种类型的数据混合运算时，系统首先自动将多有数据转换成容量最大的那种数据类型，然后再进行计算</p></li><li><p><code>byte, short</code>和<code>char</code>之间不会相互自动转换</p></li><li><p>当把一个具体的数（如果是变量赋值，则会判断类型）赋值给byte类型时，先判断该数是否在byte范围内，如果是就可以。</p></li><li><p><code>byte</code>、<code>short</code>、<code>char</code>他们三者可以计算，在计算时首先转换为<code>int</code>类型（无论是相同类型的运算还是混合运算，都会变成<code>int</code>类型）</p></li><li><p><code>布偶类型</code>不参与类型的自动转换</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.</span>
<span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//对</span>
<span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span> b2 <span class="token operator">=</span> n2<span class="token punctuation">;</span><span class="token comment">//错误，变量赋值，会判断类型，类型不符合</span>
<span class="token comment">//2.</span>
<span class="token keyword">char</span> c1 <span class="token operator">=</span> b1<span class="token punctuation">;</span><span class="token comment">//错误，byte不会自动转成char</span>
<span class="token comment">//3.</span>
<span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span> b3 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">short</span> s2 <span class="token operator">=</span> b2 <span class="token operator">+</span> s1<span class="token punctuation">;</span><span class="token comment">//错， b2+s1 =》 int</span>
<span class="token comment">//4.</span>
<span class="token keyword">byte</span> b4 <span class="token operator">=</span> b2 <span class="token operator">+</span> b3<span class="token punctuation">;</span><span class="token comment">//错，b2 + b3=》int</span>
<span class="token comment">//5.</span>
<span class="token keyword">boolean</span> pass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num100 <span class="token operator">=</span> pass<span class="token punctuation">;</span><span class="token comment">//boolean 不参与类型的自动转换</span>
<span class="token comment">//6.</span>
<span class="token keyword">byte</span> b4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">short</span> s3 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num200 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> num300 <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> num500 <span class="token operator">=</span> b4 <span class="token operator">+</span> s3 <span class="token operator">+</span> num200 <span class="token operator">+</span> num300<span class="token punctuation">;</span><span class="token comment">//允许</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="强制类型转换" tabindex="-1"><a class="header-anchor" href="#强制类型转换" aria-hidden="true">#</a> 强制类型转换:</h3><p>介绍：自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符<code>()</code>，但可能造成精度降低或溢出，格外要注意。</p><ul><li><p>当进行数据类型的大小从大=》小的转换时，就需要使用到强制类型转换</p></li><li><p>强转符号只针对最近的操作数有效，往往会使用小括号来提升优先等级</p></li><li><p><code>char</code>类型可以保存<code>int</code>类型的常量值，但不能保存<code>int</code>类型的变量值，需要强转</p></li><li><p><code>byte</code>、<code>short</code>、<code>char</code>类型在进行运算时，当作<code>int</code>类型处理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//ok</span>
<span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//ok</span>
<span class="token keyword">char</span> c2 <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token comment">//wrong</span>
<span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>m<span class="token punctuation">;</span><span class="token comment">//ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="基本数据类型和string类型的转换" tabindex="-1"><a class="header-anchor" href="#基本数据类型和string类型的转换" aria-hidden="true">#</a> 基本数据类型和String类型的转换：</h3><p>介绍：在程序开发中，我们经常需要将基本数据类型转成<code>String</code>类型。或者将<code>String</code>类型转成基本数据类型</p><ul><li>基本类型转String类型：将基本类型的值加上<code>“”</code>即可</li><li><code>String</code>类型的数据转换成基本数据类型：通过基本类型的包装类调用<code>parseXX</code>方法即可</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//String =&gt; 对应的基本数据类型</span>
<span class="token comment">//使用基本数据类型对应的包装类的相应方法，得到基本数据类型</span>
<span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> num2 <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">paresDouble</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> num3 <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">paresFloat</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> num4 <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span> num5 <span class="token operator">=</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token function">parseByte</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">short</span> num6 <span class="token operator">=</span> <span class="token class-name">Short</span><span class="token punctuation">.</span><span class="token function">parseShort</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//字符串转成字符（char类型）：得到字符串类型数据中的第一个字符</span>
<span class="token comment">//取出s5字符串中的第一位，得到字符‘1’，而不是数字1</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在将<code>String</code>类型转成<code>基本数据类型</code>时，要确保<code>String</code>类型能够转成有效的数据，比如可以把<code>”123“</code>转成一个整数，但是不可以将<code>”hello“</code>转换成一个整数</li><li>如果格式不正确，就会抛出异常，程序就会终止，需要<code>处理异常</code></li></ul><h2 id="_2-引用数据类型" tabindex="-1"><a class="header-anchor" href="#_2-引用数据类型" aria-hidden="true">#</a> 2.引用数据类型</h2><p>类、接口、数组</p><h1 id="六、运算符" tabindex="-1"><a class="header-anchor" href="#六、运算符" aria-hidden="true">#</a> 六、运算符</h1><h2 id="_1-运算符介绍" tabindex="-1"><a class="header-anchor" href="#_1-运算符介绍" aria-hidden="true">#</a> 1.运算符介绍</h2><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p><h2 id="_2-算数运算符" tabindex="-1"><a class="header-anchor" href="#_2-算数运算符" aria-hidden="true">#</a> 2.算数运算符</h2><p>介绍：算数运算符是对数值类型的变量进行运算的，在java中使用的非常多。</p><p><code>a.取模（求余）</code>：</p><p>取模的本质：<code>a % b = a - a / b * b;</code></p><p>当a为小数时，必须要使用公式运算<code>a - (int)a / b * b;</code></p><p>小结：要判断取模后的结果是正数还是负数，只需要在原有的两个数相乘的基础上，再乘上后面的数，三个数相乘是正数则是正数，是负数则是负数</p><p><code>b.自增运算符(自减运算符同理)：</code></p><p>⚠️注意：</p><ul><li>如果作为独立语句使用，自增运算符放在后面和前面都完全等价<code>i = i + 1</code></li><li>如果作为表达式使用，前<code>++</code>先自增后赋值，后<code>++</code>先赋值后自增</li></ul><p><code>++</code>(前)：先运算，后取值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span><span class="token comment">//等价：a=a+1;b=a;</span>
<span class="token comment">// a = 3;</span>
<span class="token comment">// b = 3;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>++</code>(后)：先取值，后运算</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//等价：b=a;a=a+1;</span>
<span class="token comment">// a = 2;</span>
<span class="token comment">// b = 3;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-关系运算符【比较运算符】" tabindex="-1"><a class="header-anchor" href="#_3-关系运算符【比较运算符】" aria-hidden="true">#</a> 3.关系运算符【比较运算符】</h2><p>介绍：关系运算符的结果都是boolean类型，关系表达式经常用在if结构的条件中或循环结构的条件中</p><h2 id="_4-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_4-逻辑运算符" aria-hidden="true">#</a> 4.逻辑运算符</h2><p>介绍：用于连接多个条件（多个关系表达式），最终的结果也是一个boolean类型</p><p><strong>&amp;&amp;和&amp;区别</strong></p><ul><li>&amp;&amp;短路与：如果第一个条件喂false，则第二个条件不会判断，最终结果为false</li><li>&amp;逻辑与：不管第一个条件是否为false，第二个条件都要判断，效率低</li><li>开发中基本使用短路与&amp;&amp;，效率高</li></ul><p><strong>||和|区别</strong></p><ul><li>||短路或：如果第一个条件为true，则第二个条件不会判断，最终结果为true，效率高</li><li>|逻辑或：不管第一个条件是否为true，第二个条件都要判断，效率低</li><li>开发中基本使用||短路或</li></ul><p><strong>^</strong></p><ul><li>a^b:逻辑异或，当a和b不同时，结果为true，否则为false</li></ul><h2 id="_5-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_5-赋值运算符" aria-hidden="true">#</a> 5.赋值运算符</h2><p>介绍：将某个运算后的值，赋给指定的变量</p><h2 id="_6-三元运算符" tabindex="-1"><a class="header-anchor" href="#_6-三元运算符" aria-hidden="true">#</a> 6.三元运算符</h2><p>使用细节：</p><ul><li>表达式1和表达式2要为可以赋给接收变量的类型（返回的结果数据类型需要相同，或可以自动转换的类型）</li><li>三元运算符可以转成if--else语句</li></ul><h2 id="_7-位运算符" tabindex="-1"><a class="header-anchor" href="#_7-位运算符" aria-hidden="true">#</a> 7.位运算符</h2><p>对于有符号的数而言：</p><ul><li>二进制的最高位是符号位（+/-）：0表示正数，1表示负数</li><li>正数的原码，反码，补码都一样（三码合一）</li><li>负数的反码=它的原码符号位不变，其它位取反（0变成1，1变成0）</li><li>负数的补码=他的反码+1，负数的反码=负数的补码-1</li><li>0的反码，补码都是0</li><li>java没有无符号数，换言之，java中的数都是有符号的</li><li>在计算机运行的时候，都是以补码的方式来运算的</li><li>当我们看运算结果的时候，要看他的原码</li></ul><p><strong>位运算符：</strong></p><p>介绍：java中有7个位运算符（&amp;、|、^、~、&gt;&gt;、&lt;&lt;、&gt;&gt;&gt;）</p><ul><li>**按位与&amp;：**两位全为1，结果为1，否则为0</li></ul><p><code>2&amp;3 = 2 </code></p><ol><li>先得到2的原码00000000 00000000 00000000 0000010</li><li>得到2的补码，2的补码结果和原码相等</li><li>得到3的原码00000000 00000000 00000000 00000011</li><li>得到3的补码，3的补码结果和原码相等</li><li>计算按位与&amp;的结果（补码）：00000000 00000000 00000000 0000010</li><li>计算运算后的原码：00000000 00000000 00000000 0000010</li></ol><ul><li>**按位或|：**两位有一个1，结果为1，否则为0</li><li>**按位异或^：**两位一个为0，一个为1，结果为1，否则为0</li><li>**按位取反~：**0变成1，1变成0</li></ul><p><code>~-2 = 1</code></p><ol><li>先得到-2的原码10000000 00000000 00000000 0000010</li><li>得到-2的反码11111111 11111111 11111111 11111101</li><li>得到-2的补码11111111 11111111 11111111 11111110</li><li>～-2运算后的补码00000000 00000000 00000000 00000001</li><li>运算后的原码：00000000 00000000 00000000 00000001</li><li>转换成十进制数：1</li></ol><ul><li>**算数右移&gt;&gt;：**低位溢出，符号位不变，并用符号位补溢出的高位</li></ul><p><code>int a = 1&gt;&gt;2;//1 =&gt;00000001 =&gt; 00000000 本质 1 / 2 / 2 </code></p><ul><li>**算数左移&lt;&lt;：**符号位不变，低位补0</li></ul><p><code>int b = 1&lt;&lt;2;//4 =&gt;00000100 =&gt; 00000000 本质 1 * 2 * 2 </code></p><ul><li><code>&gt;&gt;&gt;</code>逻辑右移也叫无符号右移，运算规则：低位一处，高位补0</li></ul><h2 id="_8-运算符优先级" tabindex="-1"><a class="header-anchor" href="#_8-运算符优先级" aria-hidden="true">#</a> 8.运算符优先级</h2><h1 id="七、进制" tabindex="-1"><a class="header-anchor" href="#七、进制" aria-hidden="true">#</a> 七、进制</h1><p>介绍：对于整数，有四种表示方式：</p><ul><li>二进制：0，1，满2进1。以0b或0B开头</li><li>八进制：0-7，满8进1.以数字0开头</li><li>十进制：0-9，满10进一</li><li>十六进制：0-9以及（10）-F（15），满16进1.以0x或0X开头表示，A- F不区分大小写。</li></ul><h2 id="其它进制转十进制" tabindex="-1"><a class="header-anchor" href="#其它进制转十进制" aria-hidden="true">#</a> 其它进制转十进制：</h2><ul><li>二进制转十进制</li></ul><p>规则：从最低位（右边）开始，将每个位上的数提取出来，乘以2的（位数-1）次方，然后求和</p><p>例：0b1011转换成十进制</p><p><code>0b1011 = 1*2的0次方 + 1*2的1次方 +0*2的2次方 + 1*2的3次方 =11 </code></p><ul><li>八进制转十进制</li></ul><p>规则：从最低位（右边）开始，将每个位上的数提取出来，乘以8的（位数-1）次方，然后求和</p><p>例：0234转换成十进制</p><p><code>0234 = 4*8的0次方 + 3*8的1次方 + 2*8的2次方 = 156 </code></p><ul><li>十六进制转十进制</li></ul><p>规则：从最低位（右边）开始，将每个位上的数提取出来，乘以16的（位数-1）次方，然后求和</p><p>例：0x23A转换成十进制</p><p><code>0x23A = 10*16的0次方 + 3*16的1次方 + 2*16的2次方 = 570 </code></p><h2 id="十进制转其它进制" tabindex="-1"><a class="header-anchor" href="#十进制转其它进制" aria-hidden="true">#</a> 十进制转其它进制</h2><ul><li>十进制转二进制</li></ul><p>规则：除2倒取余数法</p><p><code>123 = 0b01111011</code></p><ul><li>十进制转八进制</li></ul><p>规则：除8倒取余数法</p><p><code>678 = 01246</code></p><ul><li>十进制转十六进制</li></ul><p>规则：除16倒取余数法</p><p><code>8912 = 0x22D0</code></p><h2 id="二进制转其它进制" tabindex="-1"><a class="header-anchor" href="#二进制转其它进制" aria-hidden="true">#</a> 二进制转其它进制</h2><ul><li><strong>二进制转八进制</strong></li></ul><p>规则：从低位开始，将二进制数每三位一组（0b111 == 7），转成对应的八进制数</p><p><code>0b11010101 = 0325</code></p><ol><li>101转成八进制 = 5</li><li>010转成八进制 = 2</li><li>11转成八进制 = 3</li></ol><ul><li><strong>二进制转十六进制</strong></li></ul><p>规则：从低位开始，将二进制数每三位一组（0b1111 == 15），转成对应的十六进制数</p><p><code>0b11010101 = 0xD5</code></p><ol><li>0101转成十六进制 = 5</li><li>1101转成十六进制 = D</li></ol><h2 id="其它进制转二进制" tabindex="-1"><a class="header-anchor" href="#其它进制转二进制" aria-hidden="true">#</a> 其它进制转二进制</h2><ul><li>八进制转二进制</li></ul><p>规则：将八进制数每一位，转成对应的一个3位二进制数</p><p><code>0237 = 0b010011111</code></p><ol><li><p>7转成二进制 = 111</p></li><li><p>3转成二进制 = 011</p></li><li><p>2转成二进制 = 010</p></li></ol><ul><li>十六进制转二进制</li></ul><p>规则：将十六进制数每一位，转成对应的一个4位二进制数</p><p><code>0x23B = 1000111011 </code></p><ol><li>B转成十六进制 = 1011</li><li>3转成十六进制 = 0011</li><li>2转成十六进制 = 0010</li></ol><h1 id="八、结构控制语句" tabindex="-1"><a class="header-anchor" href="#八、结构控制语句" aria-hidden="true">#</a> 八、结构控制语句</h1><p>switch：</p><ul><li><p>表达式数据类型应和case后的常量类型一致，或者是可以自动转成可以相互比较的类型</p></li><li><p>switch表达式中的返回值必须是：byte、short、int、char、enum、String中的类型</p></li><li><p>case子句中的值必须是常量或者是常量表达式，而不能是变量</p></li></ul><h1 id="九、数组" tabindex="-1"><a class="header-anchor" href="#九、数组" aria-hidden="true">#</a> 九、数组</h1><p>介绍：数组可以存放多个同一类型的数据，数组也是一种数据类型，数组是引用数据类型</p><h2 id="_1-数组的使用" tabindex="-1"><a class="header-anchor" href="#_1-数组的使用" aria-hidden="true">#</a> 1.数组的使用</h2><ul><li>动态初始化</li></ul><p><code>int[] a = new int[5]//创建了一个数组，名字a，存放五个int</code></p><ul><li>动态初始化2</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//声明数组，此时a == null</span>
a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//分配内存空间，可以存放数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>静态初始化</li></ul><p><code>int a[] = {1,2,3,4,5,6};</code></p><h2 id="_2-数组细节" tabindex="-1"><a class="header-anchor" href="#_2-数组细节" aria-hidden="true">#</a> 2.数组细节</h2><ul><li>数组是多个相同类型数据的组合，实现对这些数据的统一管理</li><li>数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用</li><li><strong>数组创建后，如果没有赋值，有默认值</strong>：int,short,byte,long 的默认值是 0，double、float的默认值是0.0，char的默认值是\\u0000,boolean的默认值是 false，String的默认值是null</li><li>数组使用步骤：1.声明数组并开辟空间2.给数组各个元素赋值3.使用数组</li><li>数组的下标从0开始</li><li>数组下标必须在指定范围内使用，否则报错：下标越界异常</li><li>数组属于引用类型，数组型的数据是对象（object）</li></ul><h2 id="_3-数组赋值机制" tabindex="-1"><a class="header-anchor" href="#_3-数组赋值机制" aria-hidden="true">#</a> 3.数组赋值机制</h2><ul><li>基本类型肤质，这个值就是具体的数据，而且互相不影响（赋值方式为值拷贝/值传递）</li><li>数组在默认情况下是引用传递，赋的值是地址（赋值方式为引用传递/地址拷贝）</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>arr2的变化会影响到arr1</p><p>jvm内存：栈、堆、方法区三大类</p><h2 id="_4-二维数组" tabindex="-1"><a class="header-anchor" href="#_4-二维数组" aria-hidden="true">#</a> 4.二维数组</h2><p>初始化方式：</p><ul><li><p>动态初始化1：<code>int[][] a = new int[2][3]</code></p></li><li><p>动态初始化2:</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>动态初始化3:</p><p>不确定二维数组中的数组长度时，需要给每一个一维数组开辟空间，如果没有开辟空间，那么arr[i]就是null</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>静态初始化</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="十、类与对象" tabindex="-1"><a class="header-anchor" href="#十、类与对象" aria-hidden="true">#</a> 十、类与对象</h1><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h2><ul><li>属性的定义语法同变量，示例：访问修饰符 属性类型 属性名</li><li>属性的定义类型可以为任意类型，包含基本类型和引用类型</li><li>属性如果不赋值，则有默认值，规则和数组一致</li></ul><h2 id="类与对象内存的分配机制" tabindex="-1"><a class="header-anchor" href="#类与对象内存的分配机制" aria-hidden="true">#</a> 类与对象内存的分配机制</h2><p>java内存结构分析：</p><ul><li>栈：一般存放基本数据类型</li><li>堆：存放对象</li><li>方法区：常量池（常量，比如字符串），类加载信息</li></ul><p>Java创建对象的流程</p><ul><li>先加载类信息（属性和方法信息，只会加载一次）</li><li>在堆中分配空间，进行默认初始化，</li><li>把地址赋给相对应的实例，实例就指向对象</li><li>进行指定初始化</li></ul><h2 id="成员方法-方法" tabindex="-1"><a class="header-anchor" href="#成员方法-方法" aria-hidden="true">#</a> 成员方法（方法）</h2><h3 id="方法调用小结" tabindex="-1"><a class="header-anchor" href="#方法调用小结" aria-hidden="true">#</a> 方法调用小结：</h3><ul><li>当程序执行到方法时，就会开辟一个独立的空间（栈空间）</li><li>当方法执行完毕，或者执行到return语句时，就会返回</li><li>返回到调用方法的地方</li><li>返回后，继续执行方法后面的代码</li></ul><h3 id="方法的好处" tabindex="-1"><a class="header-anchor" href="#方法的好处" aria-hidden="true">#</a> 方法的好处：</h3><ul><li>提高代码的复用性</li><li>可以将实现的细节封装恰里，然后供其他用户来调用</li></ul><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项：</h3><ul><li><p>访问修饰符（作用是控制方法的使用范围）</p><ul><li>public</li><li>protected</li><li>private</li><li>默认</li></ul></li><li><p>返回数据类型：</p><ul><li>一个方法最多有一个返回值（如果需要返回多个，可以使用数组）</li><li>返回类型是任意的，包含基本类型或引用类型（数组、对象）</li><li>如果方法要求有返回数据类型，则方法体中最后的执行语句为return值，而且要求返回值类型必须和return的值类型一致或者兼容</li><li>如果方法是void，则方法体中不能有返回值</li></ul></li><li><p>参数：</p><ul><li>调用带参数的方法时，一定对应着参数列表传入相同类型或兼容类型的参数</li></ul></li><li><p>方法调用：</p><ul><li>同一个类中的方法调用：直接调用即可</li><li>方法中不能再定义方法</li><li>跨类中的方法调用：需要通过对象名调用（先创建对象，后调用）</li><li>跨类调用方法时还与方法的访问修饰符、包等有关</li></ul></li></ul><h3 id="方法递归调用" tabindex="-1"><a class="header-anchor" href="#方法递归调用" aria-hidden="true">#</a> 方法递归调用：</h3><ul><li>执行一个方法时，就创建一个新的受保护的栈</li><li>方法的局部变量是独立的，不会相互影响</li><li>如果方法中使用的是引用类型变量（比如数组、对象） ，就会共享该引用类型的数据</li><li>递归必须向退出递归的条件逼近，否则就是无限递归，出现S他此刻OverFlowError</li><li>当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕。</li></ul><h3 id="方法重载" tabindex="-1"><a class="header-anchor" href="#方法重载" aria-hidden="true">#</a> 方法重载</h3><p>介绍：Java中允许同一个类中，多个同名方法的存在，但要求形参列表不一致</p><ul><li>减少起名字和记名字的麻烦</li><li>方法名：必须相同</li><li>形参列表：必须不同，形参类型或个数或顺序，至少有一样不同，参数名无要求</li><li>返回类型：无要求，返回类型不同不能构成方法重载</li></ul><h3 id="可变参数" tabindex="-1"><a class="header-anchor" href="#可变参数" aria-hidden="true">#</a> 可变参数</h3><p>概念：Java允许将同一个类中多个同名、同功能但参数个数不同的方法，封装成一个方法。</p><ul><li>可变参数的实参可以是数组</li><li>可变参数的本质就是数组</li><li>可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//使用可变参数求和</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    res <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//9</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十一、作用域" tabindex="-1"><a class="header-anchor" href="#十一、作用域" aria-hidden="true">#</a> 十一、作用域</h2><ul><li>局部变量一般是指在成员方法中定义的变量</li><li>全局变量可以不赋值直接使用，因为有默认值。局部变量必须赋值才能使用，因为没有默认值。</li></ul><h2 id="十二、构造方法-构造器" tabindex="-1"><a class="header-anchor" href="#十二、构造方法-构造器" aria-hidden="true">#</a> 十二、构造方法/构造器</h2><p>介绍：</p><p>构造方法又较构造器，是类的一种特殊的方法，它的主要作用是完成对新对象的初始化</p><p><strong>基本语法：</strong></p><ul><li>构造器的修饰符可以是默认，也可以是public、protected、private</li><li>构造器没有返回值,不能写void</li><li>方法名和类名必须一样</li><li>参数列表和成员方法一样的规则</li><li>构造器的调用系统完成</li></ul><p><strong>使用细节：</strong></p><ul><li><p>一个类可以定义多个不同的构造器，即构造器重载</p></li><li><p>如果没有定义构造器，系统会自动给类生成一个默认无参构造器（也叫默认构造器）。可以使用<code>javap指令</code>反编译查看</p></li><li><p>一旦定义了自己的构造器，默认的构造器就被覆盖了，除非显式的定义</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> pName<span class="token punctuation">,</span><span class="token keyword">int</span> pAge<span class="token punctuation">)</span><span class="token punctuation">{</span>
    name <span class="token operator">=</span> pName<span class="token punctuation">;</span>
    age <span class="token operator">=</span> pAge<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//显式定义无参构造器</span>
<span class="token punctuation">}</span>
<span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;clean&quot;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>对象创建流程分析</strong></p><ul><li><p>加载Person类信息，只会加载一次</p></li><li><p>在堆中分配空间（地址）</p></li><li><p>完成对象初始化</p><ul><li>默认初始化age =0，name = null</li><li>显示初始化，age=90，name=null</li><li>构造器初始化age = 18，name=clean</li></ul></li></ul><h2 id="十三、this" tabindex="-1"><a class="header-anchor" href="#十三、this" aria-hidden="true">#</a> 十三、this</h2><p>哪个对象调用，this就代表哪个对象</p><ul><li>this关键字可以用来访问本类的属性、方法、构造器</li><li>this用于区分当前类的属性和局部变量</li><li>访问成员方法的语法：this.方法名(参数列表)</li><li>访问构造器语法：this.(参数列表)，只能在构造器中使用（即只能在构造器中访问另外一个构造器，且访问 必须放在第一条语句。在成员方法中不能使用）</li><li>this不能在类定义的外部使用，只能在类定义的方法中使用</li></ul><h2 id="十四、包" tabindex="-1"><a class="header-anchor" href="#十四、包" aria-hidden="true">#</a> 十四、包</h2><p><strong>包的大三作用：</strong></p><ul><li>区分相同名字的类</li><li>当类很多时，可以很好的管理类</li><li>控制访问范围</li></ul><p><strong>包基本语法：</strong></p><ul><li>package关键字，表示打包</li><li>com.clean：表示包名</li></ul><p>**包的本质：**实际上就是创建不同的文件夹来保存类文件</p><p>**包的命名规则：**只能包含数字、字母、下划线、小圆点，不能用数字开头，不能是关键字或保留字</p><p>**命名规范：**小写字母+小圆点,com.公司名.项目名.业务模块名</p><p><strong>常用包：</strong></p><ul><li>java.lang.*：lang包是基本包，默认引入，不需要再引入</li><li>java.util.*：util包，系统提供的工具包，工具类</li><li>java.net.*：网络包，网络开发</li><li>java.awt.*：java揭秘啊开发，GUI</li></ul><p><strong>注意事项和使用细节：</strong></p><ul><li><code>package</code>的作用是声明当前类所在的包，需要放在类的最上面，一个类中最到只有一句<code>package</code></li><li><code>import</code>指令，位置在package的下面，在类定义前面，可以有多句且没有顺序要求</li></ul><h2 id="十五、访问修饰符" tabindex="-1"><a class="header-anchor" href="#十五、访问修饰符" aria-hidden="true">#</a> 十五、访问修饰符</h2><p>介绍：java提供四种访问控制修饰符号，用于控制方法和属性（成员变量）的访问权限（范围）</p><ul><li><p>public：公开级别，对外公开</p></li><li><p>protected：受保护级别，对子类和同一个包中的类公开</p></li><li><p>默认：没有修饰符号，向同一个包的类公开</p></li><li><p>private：只有类本身可以访问，不对外公开</p></li></ul><table><thead><tr><th style="text-align:center;">访问控制修饰符</th><th style="text-align:center;">同类</th><th style="text-align:center;">同包</th><th style="text-align:center;">子类</th><th style="text-align:center;">不同包</th></tr></thead><tbody><tr><td style="text-align:center;">public</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✔️</td></tr><tr><td style="text-align:center;">protected</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✖️</td></tr><tr><td style="text-align:center;">默认</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✖️</td><td style="text-align:center;">✖️</td></tr><tr><td style="text-align:center;">private</td><td style="text-align:center;">✔️</td><td style="text-align:center;">✖️</td><td style="text-align:center;">✖️</td><td style="text-align:center;">✖️</td></tr></tbody></table><p><strong>使用注意事项：</strong></p><ul><li><p>修饰符可以用来修饰类中的属性、成员方法以及类</p></li><li><p>只有<code>默认修饰符</code>和<code>public</code>才能用来修饰类</p></li></ul><h2 id="十六、封装-encapsulation" tabindex="-1"><a class="header-anchor" href="#十六、封装-encapsulation" aria-hidden="true">#</a> 十六、封装（encapsulation）</h2><p>介绍：把抽象出来的数据（属性）和对数据的操作（方法）封装在一起，数据被保护在内部，程序和其他部分只有通过被授权的操作（方法）才能对数据进行操作。隐藏实现细节，只需要传入相关的参数就可以实现方法</p><p><strong>封装实现步骤：</strong></p><ul><li>将属性进行私有化（private）不能直接修改属性</li><li>提供一个公共的（public）set方法，用于对属性判断并赋值</li><li>提供一个公共的get方法，用于获取属性的值</li></ul><h2 id="十七、继承" tabindex="-1"><a class="header-anchor" href="#十七、继承" aria-hidden="true">#</a> 十七、继承</h2><p>介绍：继承可以解决代码复用，让我们的编程更加靠近人类思维。当多个类存在相同的属性（变量）和方法时，可以从这些类中抽象出父类，在父类中定义这些相同的属性和方法，所有的字类不需要重新定义这些属性和方法，只需要通过extends来声明继承父类即可。</p><ul><li><p>子类继承了所有的属性和方法，但是私有属性和方法不能在子类直接访问，要通过公共的方法去访问</p></li><li><p>子类必须调用父类的构造器，完成父类的初始化</p></li><li><p>当创建子类对象时，不管使用子类的哪个构造器，<strong><span style="color:red;">默认情况下总会去调用父类的无参构造器</span></strong>，如果父类没有提供无参构造器，则必须在子类的构造器中使用super去指定使用父类的哪个构造器完成对父类的初始化工作，否则编译不会通过。</p></li><li><p>如果希望指定去调用父类的某一个构造器，则显式的调用一下</p></li><li><p>super在使用时，需要放在构造器第一行</p></li><li><p>super()和this()都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</p></li><li><p>java所有类都是Object类的子类</p></li><li><p>父类构造器的调用不限于直接父类。将一直往上追溯直到Object类（顶级父类）</p></li><li><p>子类最多只能继承一个父类（指直接继承），即Java中时单继承机制</p></li></ul><p>我是A类</p><p>hahah我是B类的有参构造器</p><p>我是c类的有参构造器</p><p>我是c类的无参构造器</p><h2 id="十八、方法重写" tabindex="-1"><a class="header-anchor" href="#十八、方法重写" aria-hidden="true">#</a> 十八、方法重写</h2><p>方法重写也叫方法覆盖，需要满足下面的条件</p><ul><li>子类的方法的参数，方法名称，要和父类方法的参数，方法名称完全一样。</li><li>子类方法的返回类型喝父类方法返回类型一样，或者是父类返回类型的子类 <ul><li>比如父类方法的返回类型是Object，子类方法返回类型是String</li></ul></li><li>子类方法不能缩小父类方法的访问权限</li></ul><p>方法重载和方法重写的区别</p><table><thead><tr><th>名称</th><th>发生范围</th><th>方法名</th><th>形参列表</th><th>返回类型</th><th>修饰符</th></tr></thead><tbody><tr><td>重载</td><td>本类</td><td>必须一样</td><td>类型，个数或者顺序至少有一个不同</td><td>无要求</td><td>无要求</td></tr><tr><td>重写</td><td>父子类</td><td>必须一样</td><td>相同</td><td>子类重写的方法，返回的类型和父类返回的类型一致，或者是其子类</td><td>子类方法不能缩小父类方法的访问范围</td></tr></tbody></table><h2 id="十九、多态" tabindex="-1"><a class="header-anchor" href="#十九、多态" aria-hidden="true">#</a> 十九、多态</h2><p><strong>基本介绍：</strong></p><p>方法或对象具有多种形态。是面向对象的第三大特征，多态是建立在封装和继承基础之上的。</p><h3 id="对象的多态" tabindex="-1"><a class="header-anchor" href="#对象的多态" aria-hidden="true">#</a> <strong>对象的多态：</strong></h3><ul><li>一个对象的编译类型和运行类型可以不一致</li></ul><p><code>Animal animal = new Dog();</code></p><p>animal编译类型是Animal，运行类型是Dog</p><ul><li><p>编译类型在定义对象时，就确定了，不能改变</p></li><li><p>运行类型是可以变化的</p></li></ul><p><code>animal = new Cat();</code></p><p>animal运行类型变成了Cat，编译类型仍然是Animal</p><ul><li>编译类型看定义时=号的左边，运行类型看=号的右边</li></ul><p><strong>注意事项：</strong></p><p>多态的前提是：两个对象（类）存在继承关系</p><h3 id="多态的向上转型" tabindex="-1"><a class="header-anchor" href="#多态的向上转型" aria-hidden="true">#</a> <strong>多态的向上转型</strong></h3><ul><li>本质：父类的引用指向了子类的对象</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>语法：父类类型 引用名 = new 子类型();</p></li><li><p>特点（规则）：</p><ul><li><p>编译类型看左边，运行类型看右边</p></li><li><p>可以调用父类中的所有成员（需要遵守访问权限）</p></li><li><p>不能调用子类中特有成员</p><p>因为在编译阶段，能调用哪些成员，是由编译类型决定的</p></li><li><p>最终运行效果看子类的具体实现</p><p>首先是编译器将写好的代码进行编译，所以是先看编译类型。</p><p>但是在代码的运行过程中，还是需要看运行类型（即调用方法时，按照子类开始网父类查找的方法）</p></li></ul></li></ul><h3 id="多态的向下转型" tabindex="-1"><a class="header-anchor" href="#多态的向下转型" aria-hidden="true">#</a> <strong>多态的向下转型</strong></h3><ul><li>语法：<code>子类类型 引用名 = （子类类型）父类引用</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>只能强转父类的引用，不能强转父类的对象</li><li>要求父类的引用必须指向的是当前目标类型的对象</li><li>可以调用子类类型中所有的成员</li></ul><p><strong>注意</strong></p><ul><li>属性没有重写之说，<span style="color:red;font-weight:800;">属性的值看编译类型</span></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> polydetail2 <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Base</span> base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向上转型</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10,访问属性看的是编译类型，访问方法看的才是运行类型</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span>  <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>instanceof 比较操作符，用于判断对象的<strong>运行类型</strong>是否为XX类型或XX类型的子类型</li></ul><h3 id="举例" tabindex="-1"><a class="header-anchor" href="#举例" aria-hidden="true">#</a> 举例</h3><p>举例1：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> polyExercise <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">13.4</span><span class="token punctuation">;</span><span class="token comment">//ok</span>
        <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>d<span class="token punctuation">;</span><span class="token comment">//ok</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//13.4</span>
        
        <span class="token keyword">int</span> in <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//ok</span>
        <span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">)</span>in<span class="token punctuation">;</span><span class="token comment">//wrong</span>
        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span><span class="token comment">//ok</span>
        <span class="token class-name">String</span> objStr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span><span class="token comment">//ok</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Hello</span>
        
        <span class="token class-name">Object</span> objPri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ok</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>objPri<span class="token punctuation">;</span><span class="token comment">//wrong</span>
        <span class="token class-name">Integer</span> str1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>objPri<span class="token punctuation">;</span><span class="token comment">//ok</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举例2：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> polyExercise2 <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Sub</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span>
        s<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span>
        <span class="token class-name">Base</span> b <span class="token operator">=</span> s<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//True</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span>
        b<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java的动态绑定机制" tabindex="-1"><a class="header-anchor" href="#java的动态绑定机制" aria-hidden="true">#</a> java的动态绑定机制</h3><p>基本介绍：</p><ul><li>当调用对象方法的时候，该方法会和该对象的内存地址（运行类型）绑定</li><li>当调用对象属性时，没有动态绑定机制，那里声明，哪里使用</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicBinding</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//40</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//30</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除class B中的 两个sum方法之后：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicBinding</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//30</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
      <span class="token comment">//1.在运行类型 B中没有找到sum方法。于是找到了父类A中的sum方法</span>
      <span class="token comment">//2.因为动态绑定机制的原因，此时的getI()方法是class B中的方法，所以此时的getI()的值是20</span>
      <span class="token comment">//3.返回sum方法的结果为20 + 10 == 30</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
      <span class="token comment">//1.在运行类型 B中没有找到sum方法。于是找到了父类A中的sum方法</span>
      <span class="token comment">//2.因为属性不存在动态绑定机制的原因，此时的i是class A中的i，所以此时的i的值是10</span>
      <span class="token comment">//3.返回sum1方法的结果为10 + 10 == 20</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二十、object类" tabindex="-1"><a class="header-anchor" href="#二十、object类" aria-hidden="true">#</a> 二十、Object类</h2><h3 id="equals方法" tabindex="-1"><a class="header-anchor" href="#equals方法" aria-hidden="true">#</a> equals方法</h3><p>==和equals的对比：</p><ul><li>==是一个比较运算符，不是一个方法</li><li>==既可以判断基本类型，又可以判断引用类型</li><li>==如果判断基本类型，判断的是值是否相等</li><li>==如果判断引用类型，判断的是地址是否相等，即判定是不是同一个对象</li><li>equals是Object类中的方法，只能判断引用类型（Object类的equals方法默认判断对象地址是否相等，子类中往往重写该方法，用于判断内容是否相等）</li></ul><h3 id="hashcode方法" tabindex="-1"><a class="header-anchor" href="#hashcode方法" aria-hidden="true">#</a> hashCode方法</h3><ul><li>提高具有哈希结构的容器的效率</li><li>两个引用，如果指向的是同一个对象，则哈希值肯定是一样的</li><li>两个引用，如果指向的是不同对象，则哈希值是不一样的</li><li>哈希值主要根据地址号来，不能完全将哈希值等价于地址</li></ul><h3 id="tostring方法" tabindex="-1"><a class="header-anchor" href="#tostring方法" aria-hidden="true">#</a> toString方法</h3><p>默认返回：全类名（包名+类名）+@+哈希值的十六进制</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//Object的toString源码</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;@&quot;</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子类往往重写toString方法，用于返回对象的属性信息</p><p>当直接输出一个对象时，toString方法会被默认的调用</p><h3 id="finalize方法" tabindex="-1"><a class="header-anchor" href="#finalize方法" aria-hidden="true">#</a> finalize方法</h3><ul><li>当对象被回收时，系统自动调用该对象的<code>finalize</code>方法。子类可以重写该方法，做一些释放资源的操作</li><li>什么时候被回收：当某个对象没有任何引用时，则jvm认为这个对象是一个垃圾对象，就会使用垃圾回收机制来销毁该对象，在销毁该对象前，会先调用<code>finalize</code>方法</li><li>垃圾回收机制的调用，是由系统来决定，也可以通过<code>System.gc()</code>主动触发垃圾回收机制。（主动调用并不会阻塞程序的运行，只是在调用的时候执行垃圾回收器）</li></ul><p>案例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Finalize_</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Car</span> bmw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">&quot;宝马&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这时 car对象就是一个垃圾，垃圾回收机制就会回收（销毁对象），在销毁对象前，会调用该对象的finalize方法</span>
        <span class="token comment">//此时可以在这里面，写自己的业务逻辑代码（例如：释放资源，关闭数据库的连接）</span>
        <span class="token comment">//如果不重写finalize方法，那么就会调用Object类的 finalize，即默认处理</span>
        <span class="token comment">//如果重写了finalize方法，就可以实现自己的逻辑</span>
        <span class="token comment">//不是一个对象变成垃圾就直接回收的</span>
        bmw <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;程序退出了。。。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;汽车被销毁了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建对象流程" tabindex="-1"><a class="header-anchor" href="#创建对象流程" aria-hidden="true">#</a> 创建对象流程</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> debug03 <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//创建对象的流程</span>
        <span class="token comment">//（1）加载Person类系你行</span>
        <span class="token comment">//（2）初始化：2.1默认初始化  2.2显式初始化  2.3构造器初始化</span>
        <span class="token comment">//（3）返回对象的地址</span>
        <span class="token class-name">Person</span> scz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;scz&quot;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,316),l=[t];function c(o,i){return s(),a("div",null,l)}const d=n(p,[["render",c],["__file","JavaSE.html.vue"]]);export{d as default};
