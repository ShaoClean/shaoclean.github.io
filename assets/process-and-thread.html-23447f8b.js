import{_ as e,a0 as a,a1 as p,a4 as r}from"./framework-786d5328.js";const t={},c=r('<h1 id="进程和线程" tabindex="-1"><a class="header-anchor" href="#进程和线程" aria-hidden="true">#</a> 进程和线程</h1><h2 id="进程" tabindex="-1"><a class="header-anchor" href="#进程" aria-hidden="true">#</a> 进程</h2><p>一个应用程序，总是通过操作系统启动的，当操作系统启动一个应用程序时，会给其分配一个进程。</p><p>一个进程拥有独立的、可伸缩的内存空间，原则上不受其他进程干扰。</p><p>进程之间是可以通信的，只要两个进程双方遵守一定的协议，比如ipc、http</p><p><strong>CPU在不同的进程之间切换执行</strong></p><p>虽然一个应用程序在启动的时候只有一个进程，但它在运行的时候，可以开启新的进程，进程之间仍然保持相对独立</p><p>如果一个进程是直接由操作系统开启，则它叫做主进程。如果一个进程B是由进程A开启，则A是B的父进程，B是A的子进程，子进程会继承父进程的一些信息，但仍然保持相对独立。</p><h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h2><p>操作系统启动一个进程（无论是主进程，还是子进程）都会自动为它分配一个线程，称之为主线程</p><p>程序一定在线程上运行（代码 ）</p><p>主线程在运行的过程中，可以创建多个线程，这些线程称之为子线程</p><p>当操作系统命令CPU去执行一个进程时，实际上，是在该进程的多个线程中切换执行</p><p>线程和进程很相似，他们都是独立运行，最大的区别在于：线程的内存空间没有隔离，共享进程的内存空间，线程之间的数据不用遵守任何协议，可以随意使用。</p><p>什么时候要使用线程？</p><p>使用线程的主要目的，是为了充分使用多核cpu。</p><p>最理想的线程效果：</p><ol><li>线程数等于cpu的核数</li><li>线程用不阻塞</li><li>一般处理cpu密集型操作（复杂运算），io密集型操作不适合使用线程，而适合使用异步。</li></ol>',18),i=[c];function d(h,n){return a(),p("div",null,i)}const o=e(t,[["render",d],["__file","process-and-thread.html.vue"]]);export{o as default};
