import{_ as n,a0 as s,a1 as a,a4 as e}from"./framework-16947f8e.js";const o={},p=e(`<h1 id="数据类型转换规则" tabindex="-1"><a class="header-anchor" href="#数据类型转换规则" aria-hidden="true">#</a> 数据类型转换规则</h1><h2 id="原始数据类型-对象类型" tabindex="-1"><a class="header-anchor" href="#原始数据类型-对象类型" aria-hidden="true">#</a> 原始数据类型 + 对象类型</h2><p>需要把对象类型转换成原始数据类型：</p><h2 id="对象类型-对象类型" tabindex="-1"><a class="header-anchor" href="#对象类型-对象类型" aria-hidden="true">#</a> 对象类型 + 对象类型</h2><p>需要把两个对象类型转换成原始数据类型</p><h2 id="原始数据类型-比较时" tabindex="-1"><a class="header-anchor" href="#原始数据类型-比较时" aria-hidden="true">#</a> 原始数据类型 == 比较时</h2><ul><li><p>string number boolean 三者两两比较时全部转换为 number 类型再比较</p></li><li><p>null undefined 其中之一 和 string number boolean 其中之一比较时 返回 false</p></li><li><p>null 和 undefined 比较时返回 true</p></li></ul><h2 id="原始数据类型和对象-比较时" tabindex="-1"><a class="header-anchor" href="#原始数据类型和对象-比较时" aria-hidden="true">#</a> 原始数据类型和对象 == 比较时</h2><p>先调用对象数据类型的 <code>[Symbol.toPrimitive]</code> 方法</p><p>如果没定义，则先调用对象的 <code>valueOf()</code>方法</p><p>如果调用 <code>valueOf()</code>方法后返回对象类型，则继续调用 <code>toString()</code>方法</p><p style="color:red;">显式类型转换到 string 类型，是先 toString() 然后 \`valueOf()\`, 转换到 number 类型是先 \`valueOf()\` 然后 \`toString()\`, 隐式类型转换 to primitive 总是先 \`valueOf()\`, 然后 \`toString()\`</p><h2 id="显示类型转换" tabindex="-1"><a class="header-anchor" href="#显示类型转换" aria-hidden="true">#</a> 显示类型转换</h2><p>即调用 <code>Number()</code>、<code>String()</code>、<code>Boolean()</code>函数时</p><ul><li><p>转换成 string 类型 先调用 <code>toString()</code>方法 后调用 <code>valueOf()</code>方法</p></li><li><p>转换成 number 类型 先调用 <code>valueOf()</code>方法 后调用 <code>toString()</code>方法</p></li><li><p>对象类型转换成原始数据类型,先调用对象类型的<code>valueOf()</code>方法，如果<code>valueOf()</code>方法返回原始数据类型就结束转换并返回该值；</p></li></ul><p>如果<code>valueOf()</code>方法返回引用数据类型则调用<code>toString()</code>方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

arr<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;toString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

arr<span class="token punctuation">.</span><span class="token function-variable function">valueOf</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;valueOf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;res&quot;</span><span class="token punctuation">,</span> <span class="token operator">+</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//valueOf</span>
<span class="token comment">//toString</span>
<span class="token comment">//res 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意:</p><p>调用<code>toString()</code>方法并不是对<code>valueOf()</code>方法的返回值调用，而是一开始的原始数据类型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// arr.toString = function () {</span>
<span class="token comment">// 	console.log(&quot;toString&quot;);</span>
<span class="token comment">// 	return &quot;&quot;;</span>
<span class="token comment">// };</span>

arr<span class="token punctuation">.</span><span class="token function-variable function">valueOf</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;valueOf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;res&quot;</span><span class="token punctuation">,</span> <span class="token operator">+</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//valueOf</span>
<span class="token comment">//res 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="举例" tabindex="-1"><a class="header-anchor" href="#举例" aria-hidden="true">#</a> 举例</h2><p>例子 1：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> exp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token operator">+</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1.<code>([][]]+[])</code>部分 先去除掉括号变成 ==》 <code>[][[]]+[]</code></p><p>再看这一部分：<code>[][[]]</code></p><p>本质上是从一个空数组中取出指定下标元素的值；</p><p>而<code>[[]]</code>部分，分为外层的<code>[]</code>和内层的<code>[]</code>;</p><p>在取数组中的值时，外面的<code>[]</code>要求它里面为一个数值；</p><p>所以里面的一对<code>[]</code>会进行隐式类型转换，<code>[]</code>先调用<code>valueOf()</code>方法，返回值为<code>[]</code>，继续调用<code>toString()</code>方法，返回值为 <code>&#39;&#39;</code>;<code>&#39;&#39;</code>转换成数值为<code>0</code></p><p>所以<code>[][[]]</code>这一部分就变成了<code>[][0]</code>,那么空数组的下标为 <code>0</code> 的元素并没有定义，返回 <code>undefined</code></p><p>然后<code>[][]]+[]</code>变成 <code>undefined + []</code></p><p>这时候用上规则：原始数据类型 + 对象数据类型 =》对象数据类型转换成原始数据类型</p><p><code>[]</code>转成原始数据类型先调用<code>valueOf()</code>方法，返回值为<code>[]</code>，继续调用<code>toString()</code>方法，返回值为 <code>&#39;&#39;</code></p><p>也就是<code>undefined + &#39;&#39;</code></p><p>最后这一部分的值为 <code>&#39;undefined&#39;</code></p><p>2.<code>[+!![]]</code>部分</p><p>这一部分相对比较好理解</p><p><code>!![]</code>将<code>[]</code>转换成布偶类型，而对象的布偶值为<code>true</code>,也就是<code>+true</code></p><p><code>+true</code>就是将布偶值转换成数值类型，也就是 1</p><p>3.<code>([] + {})</code>部分</p><p>触发规则：对象类型 + 对象类型 =》 把两个对象类型的数据转换成原始数据类型</p><p><code>[]</code>先调用<code>valueOf()</code>方法，返回<code>[]</code>，继续调用<code>toString()</code>方法返回<code>&#39;&#39;</code>;</p><p><code>{}</code>调用<code>toString()</code>方法变成<code>[object Object]</code>;</p><p>所以这一部分的结果是<code>[object Object]</code></p><p>需要注意的是:</p><p>这一部分不能忽略掉<code>()</code>的存在，只有<code>()</code>在才算是一个表达式;否则会出现不同的结果</p><p><code>[] + {}</code>的值依然是<code>[object Object]</code></p><p>但是<code>{} + []</code>的值是<code>0</code>,由于没有括号的存在,<code>{}</code>被当成了一个语句块，而这个语句块没有任何代码;</p><p><code>+[]</code>的结果是<code>0</code>;</p><p>所以结合上面 3 步，表达式变成了:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>exp <span class="token operator">=</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;[object Object]&quot;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
exp <span class="token operator">=</span> <span class="token string">&quot;n&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span>
exp <span class="token operator">=</span> <span class="token string">&quot;nb&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子 2：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true wrong!  结果为false  null或者undefined和string number boolean比较都是false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot; \\t\\r\\n &quot;</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子 3：</p><p>变量<code>a</code>为何值时输出<code>true</code>?</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>很显然 a 不为原始数据类型，只能为对象类型的数据时发生类型转换才能实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>a <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,58),t=[p];function c(l,u){return s(),a("div",null,t)}const d=n(o,[["render",c],["__file","data-type-rules.html.vue"]]);export{d as default};
