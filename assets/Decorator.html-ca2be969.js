import{_ as e,a0 as p,a1 as o,a2 as s,a3 as n,a5 as t,a4 as c,C as i}from"./framework-786d5328.js";const l={},u=s("h1",{id:"装饰器",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#装饰器","aria-hidden":"true"},"#"),n(" 装饰器")],-1),r={href:"https://github.com/tc39/proposal-decorators",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.tslang.cn/docs/handbook/decorators.html#class-decorators",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.tslang.cn/docs/handbook/decorators.html#method-decorators",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.tslang.cn/docs/handbook/decorators.html#accessor-decorators",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.tslang.cn/docs/handbook/decorators.html#property-decorators",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.tslang.cn/docs/handbook/decorators.html#parameter-decorators",target:"_blank",rel:"noopener noreferrer"},g=s("code",null,"@expression",-1),h=c(`<p>装饰器只能在类中使用</p><h2 id="启用装饰器" tabindex="-1"><a class="header-anchor" href="#启用装饰器" aria-hidden="true">#</a> 启用装饰器</h2><p>目前ts的装饰器是一项实验性的特性，默认在ts的项目里面是不支持的，需要在<code>tsconfig.json</code>文件中手动开启：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">//tsconfig.json</span>
<span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;experimentalDecorators&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手" aria-hidden="true">#</a> 快速上手</h2><p>例如有一个<code>decorator</code>装饰器：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">decorator</span><span class="token punctuation">(</span>target<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">,</span>key<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>describtor<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">,</span>describtor<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一个<code>Person</code>类</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
  age<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">18</span>
  
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">decorator</span></span>
  <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;getAge function&quot;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在没有调用类的情况下看一下控制台的输出：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7374/image-20220917134238195.png" alt="image-20220917134238195"></p><p>可以看到在没有调用类的情况下这个函数就已经执行了</p><p>为了可以接受参数的问题，使用函数柯理化的方式来定义一个装饰器：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
  age<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">18</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">decorator</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;getAge function&quot;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">decorator</span><span class="token punctuation">(</span>add<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">,</span>key<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>describtor<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">,</span>describtor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次看一下控制台打印的信息：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7374/image-20220917140453867.png" alt="image-20220917140453867"></p><p>成功的接收到了参数，顺便可以看一下执行的顺序是从上到下的。</p><p>可以通过重写<code>describtor.value</code>重载函数来改变原先类中的一些信息：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">decorator</span><span class="token punctuation">(</span>add<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">,</span>key<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>describtor<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">,</span>describtor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//保存之前的函数</span>
    <span class="token keyword">const</span> preFun <span class="token operator">=</span> describtor<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token comment">//函数重载</span>
    describtor<span class="token punctuation">.</span><span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> add<span class="token punctuation">;</span>
      <span class="token function">preFun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看一下控制台的打印信息：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7374/image-20220917141940792.png" alt="image-20220917141940792"></p>`,21);function f(y,_){const a=i("ExternalLinkIcon");return p(),o("div",null,[u,s("blockquote",null,[s("p",null,[n("随着TypeScript和ES6里引入了类，在一些场景下我们需要额外的特性来支持标注或修改类及其成员。 装饰器（Decorators）为我们在类的声明及成员上通过元编程语法添加标注提供了一种方式。 Javascript里的装饰器目前处在 "),s("a",r,[n("建议征集的第二阶段"),t(a)]),n("，但在TypeScript里已做为一项实验性特性予以支持。")])]),s("p",null,[n("装饰器的本质其实就是一个函数，一种特殊类型的声明，它能够被附加到"),s("a",d,[n("类声明"),t(a)]),n("，"),s("a",k,[n("方法"),t(a)]),n("， "),s("a",v,[n("访问符"),t(a)]),n("，"),s("a",b,[n("属性"),t(a)]),n("或"),s("a",m,[n("参数"),t(a)]),n("上。在需要装饰的地方使用"),g,n("这样的表达形式。")]),h])}const x=e(l,[["render",f],["__file","Decorator.html.vue"]]);export{x as default};
