import{_ as n,a0 as s,a1 as a,a4 as t}from"./framework-786d5328.js";const p={},e=t(`<h1 id="增强预览性能优化历程" tabindex="-1"><a class="header-anchor" href="#增强预览性能优化历程" aria-hidden="true">#</a> 增强预览性能优化历程</h1><p>之前我从前端、后端这两个方面分别用了一些优化手段，保证在算法不运行的情况下能够流畅的实现图片的切换。问题出现在运行增强预览这一段程序的时候，<strong>CPU</strong>、<strong>磁盘 IO</strong>会突然上升并占满，导致前端发送的 HTTP 请求迟迟得不到响应，才会导致看起来出图的速度以及切换图片时候很慢。</p><p>经过这么多天的优化，终于知道问题出现在了哪里，并且对症下药暂时的解决了问题。</p><p><strong>主要的原因有两个：</strong></p><ol><li><p>是算法同事的某一项增强项目（随机扩展）会对图片进行格式的转换，一张 174M 的图片经过转换后的大小是 697M，这 679M 的图片在扩展 1.5*1.5 倍之后在内存中的大小直逼 1.5G。在算法改为多进程之后，读取图片的速度更是成 N 倍增长，所以在任务管理器中看到各项指标的占用情况非常的不好。</p></li><li><p>node 端在处理算法返回的数据时，之前用了 npm 上的一个包（queue）来控制写数据库的并发量。之前在实测的过程中发现写数据库的并发量并没有达到效果。原来是使用的方式出现了问题，和这个包的版本有关系。</p><p>之前的错误用法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">cb</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">writeDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">setTimeout</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在的正确用法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">writeDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,5),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","enhance_preview_perf.html.vue"]]);export{r as default};
