import{_ as n,a0 as a,a1 as s,a4 as t}from"./framework-786d5328.js";const p={},o=t(`<h1 id="开学" tabindex="-1"><a class="header-anchor" href="#开学" aria-hidden="true">#</a> 开学！</h1><p>好！准备开始学数据结构了！</p><p>4.26:</p><p>笑死了，今天正准备抽出时间来学一下的，结果键盘的command键给坏掉了，我是那个不服啊，花了一点时间给它办了。</p><p>还是有一点收获的，大致的看了一下数组上的方法，看到了from和of的区别</p><p>4.27 真烦啊，看了一下from和of的区别，给我看郁郁了，这什么玩意啊，干啥用的啊</p><p>Array构造函数用来创建数组嘛，就比如说我写了一个<code>Array(2)</code>，这个时候就会创建一个数组，但是这个数组没有任何东西，只是它的长度为2，用<code>empty</code>来占位。</p><p>但像这样传入的参数超过一个<code>Array(2,3)</code>，就会创建对应的数组实例了，也就是<code>[2,3]</code>。</p><p>那么Array.of()方法呢，在传入一个参数的情况下，也可以创建一个数组的实例对象，比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[2]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我在MDN上面看到一段代码，属实是有点恶心看不懂：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">NotArray</span><span class="token punctuation">(</span><span class="token parameter">len</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;NotArray called with length&quot;</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>NotArray<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// NotArray called with length 3</span>
<span class="token comment">// NotArray { &#39;0&#39;: 1, &#39;1&#39;: 2, &#39;2&#39;: 3, length: 3 }</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Number: 0] { length: 0 }</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>chatGPT是这样解释的，是在不想看了，到时候有机会再看吧。</p><blockquote><p>首先，这段代码定义了一个函数NotArray，该函数接收一个参数len并在控制台上打印出NotArray called with length和len的值。</p><p>接下来，代码调用了Array.of方法，并使用.call()方法将NotArray函数作为Array.of方法的上下文来调用。.call()方法允许我们在指定的上下文中调用一个函数，同时将其余的参数作为参数传递给该函数。</p><p>因为Array.of需要被一个数组构造函数调用，所以我们需要将一个数组构造函数作为上下文传递给.call()方法。但是，这里我们使用了NotArray函数作为上下文。</p><p>这是因为，尽管NotArray不是一个数组构造函数，但它在这里充当了我们需要的上下文。</p><p>最后，我们将参数1、2和3传递给Array.of方法。由于我们在上下文中调用了Array.of，它会将这三个参数转换为一个新的数组并返回。这个数组被传递给了console.log函数，最终在控制台上输出了[1, 2, 3]。</p></blockquote><p>5.6 搞了这么久，还是没有修完bug，，，，</p><p>还被莫名其妙的夸了，不明白捏。。。</p>`,16),c=[o];function e(l,u){return a(),s("div",null,c)}const r=n(p,[["render",e],["__file","15.html.vue"]]);export{r as default};
